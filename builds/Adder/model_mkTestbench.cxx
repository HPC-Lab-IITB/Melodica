/*
 * Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
 * 
 * On Tue Feb  4 15:26:50 IST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTestbench.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTestbench::MODEL_mkTestbench()
{
  mkTestbench_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTestbench()
{
  MODEL_mkTestbench *model = new MODEL_mkTestbench();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTestbench &INST_top = *((MOD_mkTestbench *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_rgGenComplete__h558;
	 tUInt8 DEF_INST_top_DEF_rgChkComplete__h875;
	 tUInt8 DEF_INST_top_DEF_doneSet__h546;
	 INST_top.INST_dut.PORT_EN_compute_response_get = (tUInt8)0u;
	 INST_top.INST_dut.DEF_WILL_FIRE_compute_response_get = (tUInt8)0u;
	 INST_top.INST_dut.PORT_EN_compute_request_put = (tUInt8)0u;
	 INST_top.INST_dut.DEF_WILL_FIRE_compute_request_put = (tUInt8)0u;
	 DEF_INST_top_DEF_doneSet__h546 = INST_top.INST_doneSet.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_lfsrGenerate = !DEF_INST_top_DEF_doneSet__h546;
	 INST_top.DEF_WILL_FIRE_RL_lfsrGenerate = INST_top.DEF_CAN_FIRE_RL_lfsrGenerate;
	 DEF_INST_top_DEF_rgChkComplete__h875 = INST_top.INST_rgChkComplete.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rlCheck = (INST_top.INST_dut.METH_RDY_compute_response_get() && (INST_top.INST_ffInputVals.METH_i_notEmpty() && INST_top.INST_ffInputVals1.METH_i_notEmpty())) && (!DEF_INST_top_DEF_rgChkComplete__h875 && DEF_INST_top_DEF_doneSet__h546);
	 INST_top.DEF_WILL_FIRE_RL_rlCheck = INST_top.DEF_CAN_FIRE_RL_rlCheck;
	 INST_top.DEF_CAN_FIRE_RL_rlFinish = DEF_INST_top_DEF_rgChkComplete__h875 && DEF_INST_top_DEF_doneSet__h546;
	 INST_top.DEF_WILL_FIRE_RL_rlFinish = INST_top.DEF_CAN_FIRE_RL_rlFinish;
	 DEF_INST_top_DEF_rgGenComplete__h558 = INST_top.INST_rgGenComplete.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rlGenerate = (INST_top.INST_dut.METH_RDY_compute_request_put() && (INST_top.INST_ffInputVals.METH_i_notFull() && INST_top.INST_ffInputVals1.METH_i_notFull())) && (!DEF_INST_top_DEF_rgGenComplete__h558 && DEF_INST_top_DEF_doneSet__h546);
	 INST_top.DEF_WILL_FIRE_RL_rlGenerate = INST_top.DEF_CAN_FIRE_RL_rlGenerate;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_adder1_stage_1 = INST_top.INST_dut.INST_adder1_fifo_stage0_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_adder1_fifo_stage1_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_adder1_stage_1 = INST_top.INST_dut.DEF_CAN_FIRE_RL_adder1_stage_1;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_adder1_stage_0 = INST_top.INST_dut.INST_adder1_fifo_input_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_adder1_fifo_stage0_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_adder1_stage_0 = INST_top.INST_dut.DEF_CAN_FIRE_RL_adder1_stage_0;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_adder1_stage_2 = INST_top.INST_dut.INST_adder1_fifo_stage1_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_adder1_fifo_output_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_adder1_stage_2 = INST_top.INST_dut.DEF_CAN_FIRE_RL_adder1_stage_2;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter1_stage_0 = INST_top.INST_dut.INST_extracter1_fifo_input_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter1_fifo_stage0_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter1_stage_0 = INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter1_stage_0;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter1_stage_1 = INST_top.INST_dut.INST_extracter1_fifo_stage0_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter1_fifo_stage1_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter1_stage_1 = INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter1_stage_1;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter1_stage_2 = INST_top.INST_dut.INST_extracter1_fifo_stage1_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter1_fifo_stage2_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter1_stage_2 = INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter1_stage_2;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter2_stage_0 = INST_top.INST_dut.INST_extracter2_fifo_input_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter2_fifo_stage0_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter2_stage_0 = INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter2_stage_0;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter1_stage_3 = INST_top.INST_dut.INST_extracter1_fifo_stage2_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter1_fifo_output_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter1_stage_3 = INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter1_stage_3;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter2_stage_1 = INST_top.INST_dut.INST_extracter2_fifo_stage0_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter2_fifo_stage1_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter2_stage_1 = INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter2_stage_1;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter2_stage_3 = INST_top.INST_dut.INST_extracter2_fifo_stage2_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter2_fifo_output_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter2_stage_3 = INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter2_stage_3;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter2_stage_2 = INST_top.INST_dut.INST_extracter2_fifo_stage1_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter2_fifo_stage2_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter2_stage_2 = INST_top.INST_dut.DEF_CAN_FIRE_RL_extracter2_stage_2;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_normalizer_stage_0 = INST_top.INST_dut.INST_normalizer_fifo_input_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_normalizer_fifo_stage0_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_normalizer_stage_0 = INST_top.INST_dut.DEF_CAN_FIRE_RL_normalizer_stage_0;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_normalizer_stage_2 = INST_top.INST_dut.INST_normalizer_fifo_stage1_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_normalizer_fifo_stage2_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_normalizer_stage_2 = INST_top.INST_dut.DEF_CAN_FIRE_RL_normalizer_stage_2;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_normalizer_stage_1 = INST_top.INST_dut.INST_normalizer_fifo_stage0_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_normalizer_fifo_stage1_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_normalizer_stage_1 = INST_top.INST_dut.DEF_CAN_FIRE_RL_normalizer_stage_1;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_normalizer_stage_3 = INST_top.INST_dut.INST_normalizer_fifo_stage2_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_normalizer_fifo_output_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_normalizer_stage_3 = INST_top.INST_dut.DEF_CAN_FIRE_RL_normalizer_stage_3;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_rl_connect0 = INST_top.INST_dut.INST_extracter1_fifo_output_reg.METH_i_notEmpty() && (INST_top.INST_dut.INST_extracter2_fifo_output_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_adder1_fifo_input_reg.METH_i_notFull());
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_rl_connect0 = INST_top.INST_dut.DEF_CAN_FIRE_RL_rl_connect0;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_rl_connect2 = INST_top.INST_dut.INST_adder1_fifo_output_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_normalizer_fifo_input_reg.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_rl_connect2 = INST_top.INST_dut.DEF_CAN_FIRE_RL_rl_connect2;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_rl_in = INST_top.INST_dut.INST_extracter1_fifo_input_reg.METH_i_notFull() && (INST_top.INST_dut.INST_ffI.METH_i_notEmpty() && INST_top.INST_dut.INST_extracter2_fifo_input_reg.METH_i_notFull());
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_rl_in = INST_top.INST_dut.DEF_CAN_FIRE_RL_rl_in;
	 INST_top.INST_dut.DEF_CAN_FIRE_RL_rl_out = INST_top.INST_dut.INST_normalizer_fifo_output_reg.METH_i_notEmpty() && INST_top.INST_dut.INST_ffO.METH_i_notFull();
	 INST_top.INST_dut.DEF_WILL_FIRE_RL_rl_out = INST_top.INST_dut.DEF_CAN_FIRE_RL_rl_out;
	 if (INST_top.DEF_WILL_FIRE_RL_lfsrGenerate)
	   INST_top.RL_lfsrGenerate();
	 if (INST_top.DEF_WILL_FIRE_RL_rlCheck)
	   INST_top.RL_rlCheck();
	 if (INST_top.DEF_WILL_FIRE_RL_rlFinish)
	   INST_top.RL_rlFinish();
	 if (INST_top.DEF_WILL_FIRE_RL_rlGenerate)
	   INST_top.RL_rlGenerate();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_adder1_stage_1)
	   INST_top.INST_dut.RL_adder1_stage_1();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_adder1_stage_0)
	   INST_top.INST_dut.RL_adder1_stage_0();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_adder1_stage_2)
	   INST_top.INST_dut.RL_adder1_stage_2();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter1_stage_0)
	   INST_top.INST_dut.RL_extracter1_stage_0();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter1_stage_1)
	   INST_top.INST_dut.RL_extracter1_stage_1();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter1_stage_2)
	   INST_top.INST_dut.RL_extracter1_stage_2();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter2_stage_0)
	   INST_top.INST_dut.RL_extracter2_stage_0();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter1_stage_3)
	   INST_top.INST_dut.RL_extracter1_stage_3();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter2_stage_1)
	   INST_top.INST_dut.RL_extracter2_stage_1();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter2_stage_3)
	   INST_top.INST_dut.RL_extracter2_stage_3();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_extracter2_stage_2)
	   INST_top.INST_dut.RL_extracter2_stage_2();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_normalizer_stage_0)
	   INST_top.INST_dut.RL_normalizer_stage_0();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_normalizer_stage_2)
	   INST_top.INST_dut.RL_normalizer_stage_2();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_normalizer_stage_1)
	   INST_top.INST_dut.RL_normalizer_stage_1();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_normalizer_stage_3)
	   INST_top.INST_dut.RL_normalizer_stage_3();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_rl_connect0)
	   INST_top.INST_dut.RL_rl_connect0();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_rl_connect2)
	   INST_top.INST_dut.RL_rl_connect2();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_rl_in)
	   INST_top.INST_dut.RL_rl_in();
	 if (INST_top.INST_dut.DEF_WILL_FIRE_RL_rl_out)
	   INST_top.INST_dut.RL_rl_out();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_dut.INST_ffI.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_ffO.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_ffm.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter1_fifo_input_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter1_fifo_output_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter1_fifo_stage0_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter1_fifo_stage1_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter1_fifo_stage2_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter2_fifo_input_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter2_fifo_output_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter2_fifo_stage0_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter2_fifo_stage1_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_extracter2_fifo_stage2_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_adder1_fifo_input_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_adder1_fifo_output_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_adder1_fifo_stage0_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_adder1_fifo_stage1_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_normalizer_fifo_input_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_normalizer_fifo_output_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_normalizer_fifo_stage0_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_normalizer_fifo_stage1_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut.INST_normalizer_fifo_stage2_reg.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_rgGenComplete.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rgCurInput.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rgCurInput1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ffInputVals.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_ffInputVals1.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_wrongOut.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rgCurOutput.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rgCurOutput1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rgChkComplete.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_rgError.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_doneSet.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTestbench::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTestbench_instance = new MOD_mkTestbench(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTestbench_instance->INST_ffInputVals.set_clk_0)("CLK");
  (mkTestbench_instance->INST_ffInputVals1.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_ffI.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_ffO.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_ffm.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter1_fifo_input_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter1_fifo_output_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter1_fifo_stage0_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter1_fifo_stage1_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter1_fifo_stage2_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter2_fifo_input_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter2_fifo_output_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter2_fifo_stage0_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter2_fifo_stage1_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_extracter2_fifo_stage2_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_adder1_fifo_input_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_adder1_fifo_output_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_adder1_fifo_stage0_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_adder1_fifo_stage1_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_normalizer_fifo_input_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_normalizer_fifo_output_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_normalizer_fifo_stage0_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_normalizer_fifo_stage1_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.INST_normalizer_fifo_stage2_reg.set_clk_0)("CLK");
  (mkTestbench_instance->INST_dut.set_clk_0)("CLK");
  (mkTestbench_instance->set_clk_0)("CLK");
}
void MODEL_mkTestbench::destroy_model()
{
  delete mkTestbench_instance;
  mkTestbench_instance = NULL;
}
void MODEL_mkTestbench::reset_model(bool asserted)
{
  (mkTestbench_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTestbench::get_instance()
{
  return mkTestbench_instance;
}

/* Fill in version numbers */
void MODEL_mkTestbench::get_version(unsigned int *year,
				    unsigned int *month,
				    char const **annotation,
				    char const **build)
{
  *year = 2018u;
  *month = 10u;
  *annotation = "beta1";
  *build = "e1df8052c";
}

/* Get the model creation time */
time_t MODEL_mkTestbench::get_creation_time()
{
  
  /* Tue Feb  4 09:56:50 UTC 2020 */
  return 1580810210llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTestbench::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTestbench::dump_state()
{
  (mkTestbench_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTestbench & mkTestbench_backing(tSimStateHdl simHdl)
{
  static MOD_mkTestbench *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTestbench(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTestbench::dump_VCD_defs()
{
  (mkTestbench_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTestbench::dump_VCD(tVCDDumpType dt)
{
  (mkTestbench_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTestbench_backing(sim_hdl));
}
