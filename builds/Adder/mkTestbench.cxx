/*
 * Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
 * 
 * On Tue Feb  4 15:26:50 IST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("%d", 2u);
static std::string const __str_literal_1("[%0d]::ERR::Input=%b::Input2=%b::Expected Output=%b::Output=%b",
					 62u);
static std::string const __str_literal_4("[%0d]::INF::No errors found.", 28u);
static std::string const __str_literal_3("[%0d]::INF::with errors found.", 30u);


/* Constructor */
MOD_mkTestbench::MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_doneSet(simHdl, "doneSet", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut(simHdl, "dut", this),
    INST_ffInputVals(simHdl, "ffInputVals", this, 16u, 22u, 1u, 0u),
    INST_ffInputVals1(simHdl, "ffInputVals1", this, 16u, 22u, 1u, 0u),
    INST_rgChkComplete(simHdl, "rgChkComplete", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rgCurInput(simHdl, "rgCurInput", this, 16u, 0u, (tUInt8)0u),
    INST_rgCurInput1(simHdl, "rgCurInput1", this, 16u, 0u, (tUInt8)0u),
    INST_rgCurOutput(simHdl, "rgCurOutput", this, 16u, 0u, (tUInt8)0u),
    INST_rgCurOutput1(simHdl, "rgCurOutput1", this, 16u, 0u, (tUInt8)0u),
    INST_rgError(simHdl, "rgError", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rgGenComplete(simHdl, "rgGenComplete", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_wrongOut(simHdl, "wrongOut", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h1365(12297829382473034410llu),
    DEF_v__h1332(12297829382473034410llu),
    DEF_v__h1003(12297829382473034410llu)
{
  symbol_count = 24u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_lfsrGenerate", SYM_DEF, &DEF_CAN_FIRE_RL_lfsrGenerate, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_rlCheck", SYM_DEF, &DEF_CAN_FIRE_RL_rlCheck, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_rlFinish", SYM_DEF, &DEF_CAN_FIRE_RL_rlFinish, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_rlGenerate", SYM_DEF, &DEF_CAN_FIRE_RL_rlGenerate, 1u);
  init_symbol(&symbols[4u], "doneSet", SYM_MODULE, &INST_doneSet);
  init_symbol(&symbols[5u], "dut", SYM_MODULE, &INST_dut);
  init_symbol(&symbols[6u], "ffInputVals", SYM_MODULE, &INST_ffInputVals);
  init_symbol(&symbols[7u], "ffInputVals1", SYM_MODULE, &INST_ffInputVals1);
  init_symbol(&symbols[8u], "RL_lfsrGenerate", SYM_RULE);
  init_symbol(&symbols[9u], "RL_rlCheck", SYM_RULE);
  init_symbol(&symbols[10u], "RL_rlFinish", SYM_RULE);
  init_symbol(&symbols[11u], "RL_rlGenerate", SYM_RULE);
  init_symbol(&symbols[12u], "rgChkComplete", SYM_MODULE, &INST_rgChkComplete);
  init_symbol(&symbols[13u], "rgCurInput", SYM_MODULE, &INST_rgCurInput);
  init_symbol(&symbols[14u], "rgCurInput1", SYM_MODULE, &INST_rgCurInput1);
  init_symbol(&symbols[15u], "rgCurOutput", SYM_MODULE, &INST_rgCurOutput);
  init_symbol(&symbols[16u], "rgCurOutput1", SYM_MODULE, &INST_rgCurOutput1);
  init_symbol(&symbols[17u], "rgError", SYM_MODULE, &INST_rgError);
  init_symbol(&symbols[18u], "rgGenComplete", SYM_MODULE, &INST_rgGenComplete);
  init_symbol(&symbols[19u],
	      "WILL_FIRE_RL_lfsrGenerate",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_lfsrGenerate,
	      1u);
  init_symbol(&symbols[20u], "WILL_FIRE_RL_rlCheck", SYM_DEF, &DEF_WILL_FIRE_RL_rlCheck, 1u);
  init_symbol(&symbols[21u], "WILL_FIRE_RL_rlFinish", SYM_DEF, &DEF_WILL_FIRE_RL_rlFinish, 1u);
  init_symbol(&symbols[22u], "WILL_FIRE_RL_rlGenerate", SYM_DEF, &DEF_WILL_FIRE_RL_rlGenerate, 1u);
  init_symbol(&symbols[23u], "wrongOut", SYM_MODULE, &INST_wrongOut);
}


/* Rule actions */

void MOD_mkTestbench::RL_lfsrGenerate()
{
  INST_doneSet.METH_write((tUInt8)1u);
}

void MOD_mkTestbench::RL_rlGenerate()
{
  tUInt32 DEF_rgCurInput_2_CONCAT_rgCurInput1_3___d14;
  tUInt32 DEF_x__h760;
  tUInt8 DEF_rgCurInput_2_EQ_65535_9_AND_rgCurInput1_3_EQ_6_ETC___d20;
  tUInt32 DEF_x__h799;
  tUInt8 DEF_rgCurInput1_3_EQ_65535___d15;
  tUInt32 DEF_IF_rgCurInput1_3_EQ_65535_5_THEN_0_ELSE_rgCurI_ETC___d17;
  tUInt32 DEF_x__h855;
  tUInt32 DEF_x__h862;
  DEF_x__h862 = INST_rgCurInput1.METH_read();
  DEF_x__h855 = INST_rgCurInput.METH_read();
  DEF_rgCurInput1_3_EQ_65535___d15 = DEF_x__h862 == 65535u;
  DEF_x__h799 = 65535u & (DEF_x__h862 + 1u);
  DEF_IF_rgCurInput1_3_EQ_65535_5_THEN_0_ELSE_rgCurI_ETC___d17 = DEF_rgCurInput1_3_EQ_65535___d15 ? 0u : DEF_x__h799;
  DEF_rgCurInput_2_EQ_65535_9_AND_rgCurInput1_3_EQ_6_ETC___d20 = DEF_x__h855 == 65535u && DEF_rgCurInput1_3_EQ_65535___d15;
  DEF_x__h760 = 65535u & (DEF_x__h855 + 1u);
  DEF_rgCurInput_2_CONCAT_rgCurInput1_3___d14 = (DEF_x__h855 << 16u) | DEF_x__h862;
  INST_dut.METH_compute_request_put(DEF_rgCurInput_2_CONCAT_rgCurInput1_3___d14);
  INST_ffInputVals.METH_enq(DEF_x__h855);
  INST_ffInputVals1.METH_enq(DEF_x__h862);
  INST_rgCurInput1.METH_write(DEF_IF_rgCurInput1_3_EQ_65535_5_THEN_0_ELSE_rgCurI_ETC___d17);
  INST_rgGenComplete.METH_write(DEF_rgCurInput_2_EQ_65535_9_AND_rgCurInput1_3_EQ_6_ETC___d20);
  if (DEF_rgCurInput1_3_EQ_65535___d15)
    INST_rgCurInput.METH_write(DEF_x__h760);
}

void MOD_mkTestbench::RL_rlCheck()
{
  tUInt32 DEF_x__h1176;
  tUInt32 DEF_x__h1064;
  tUInt8 DEF_NOT_dut_compute_response_get_0_BITS_15_TO_0_1__ETC___d36;
  tUInt8 DEF_rgCurOutput_4_EQ_65535___d46;
  tUInt32 DEF_x__h1216;
  tUInt8 DEF_rgCurOutput1_0_EQ_65535___d41;
  tUInt32 DEF_IF_rgCurOutput1_0_EQ_65535_1_THEN_0_ELSE_rgCur_ETC___d43;
  tUInt32 DEF_x__h968;
  tUInt32 DEF_x__h1272;
  tUInt32 DEF_x__h1226;
  tUInt32 DEF_input2_c__h930;
  tUInt32 DEF_input1_c__h902;
  tUInt32 DEF_expected__h958;
  tUInt32 DEF_AVMeth_dut_compute_response_get;
  DEF_input1_c__h902 = INST_ffInputVals.METH_first();
  DEF_input2_c__h930 = INST_ffInputVals1.METH_first();
  DEF_expected__h958 = positAdd16(DEF_input1_c__h902, DEF_input2_c__h930);
  DEF__read__h337 = INST_wrongOut.METH_read();
  DEF_x__h1272 = INST_rgCurOutput.METH_read();
  DEF_x__h1226 = INST_rgCurOutput1.METH_read();
  DEF_rgCurOutput1_0_EQ_65535___d41 = DEF_x__h1226 == 65535u;
  DEF_x__h1216 = 65535u & (DEF_x__h1226 + 1u);
  DEF_IF_rgCurOutput1_0_EQ_65535_1_THEN_0_ELSE_rgCur_ETC___d43 = DEF_rgCurOutput1_0_EQ_65535___d41 ? 0u : DEF_x__h1216;
  DEF_x__h1064 = DEF__read__h337 + 1u;
  DEF_rgCurOutput_4_EQ_65535___d46 = DEF_x__h1272 == 65535u;
  DEF_x__h1176 = 65535u & (DEF_x__h1272 + 1u);
  DEF_AVMeth_dut_compute_response_get = INST_dut.METH_compute_response_get();
  DEF_x__h968 = (tUInt32)(65535u & DEF_AVMeth_dut_compute_response_get);
  DEF_NOT_dut_compute_response_get_0_BITS_15_TO_0_1__ETC___d36 = !(DEF_x__h968 == DEF_expected__h958);
  INST_ffInputVals.METH_deq();
  INST_ffInputVals1.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_compute_response_get_0_BITS_15_TO_0_1__ETC___d36)
      DEF_v__h1003 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_compute_response_get_0_BITS_15_TO_0_1__ETC___d36)
      dollar_display(sim_hdl,
		     this,
		     "s,64,16,16,16,16",
		     &__str_literal_1,
		     DEF_v__h1003,
		     DEF_input1_c__h902,
		     DEF_input2_c__h930,
		     DEF_expected__h958,
		     DEF_x__h968);
  if (DEF_NOT_dut_compute_response_get_0_BITS_15_TO_0_1__ETC___d36)
    INST_rgError.METH_write((tUInt8)1u);
  if (DEF_NOT_dut_compute_response_get_0_BITS_15_TO_0_1__ETC___d36)
    INST_wrongOut.METH_write(DEF_x__h1064);
  INST_rgCurOutput1.METH_write(DEF_IF_rgCurOutput1_0_EQ_65535_1_THEN_0_ELSE_rgCur_ETC___d43);
  if (DEF_rgCurOutput1_0_EQ_65535___d41)
    INST_rgCurOutput.METH_write(DEF_x__h1176);
  INST_rgChkComplete.METH_write(DEF_rgCurOutput_4_EQ_65535___d46);
}

void MOD_mkTestbench::RL_rlFinish()
{
  tUInt8 DEF_NOT_rgError_8___d50;
  tUInt8 DEF_rgError__h1311;
  DEF__read__h337 = INST_wrongOut.METH_read();
  DEF_rgError__h1311 = INST_rgError.METH_read();
  DEF_NOT_rgError_8___d50 = !DEF_rgError__h1311;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,32", &__str_literal_2, DEF__read__h337);
    if (DEF_rgError__h1311)
      DEF_v__h1365 = dollar_time(sim_hdl);
  }
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_rgError__h1311)
      dollar_display(sim_hdl, this, "s,64", &__str_literal_3, DEF_v__h1365);
    if (DEF_NOT_rgError_8___d50)
      DEF_v__h1332 = dollar_time(sim_hdl);
  }
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_rgError_8___d50)
      dollar_display(sim_hdl, this, "s,64", &__str_literal_4, DEF_v__h1332);
    dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_wrongOut.reset_RST(ARG_rst_in);
  INST_rgGenComplete.reset_RST(ARG_rst_in);
  INST_rgError.reset_RST(ARG_rst_in);
  INST_rgCurOutput1.reset_RST(ARG_rst_in);
  INST_rgCurOutput.reset_RST(ARG_rst_in);
  INST_rgCurInput1.reset_RST(ARG_rst_in);
  INST_rgCurInput.reset_RST(ARG_rst_in);
  INST_rgChkComplete.reset_RST(ARG_rst_in);
  INST_ffInputVals1.reset_RST(ARG_rst_in);
  INST_ffInputVals.reset_RST(ARG_rst_in);
  INST_dut.reset_RST_N(ARG_rst_in);
  INST_doneSet.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_doneSet.dump_state(indent + 2u);
  INST_dut.dump_state(indent + 2u);
  INST_ffInputVals.dump_state(indent + 2u);
  INST_ffInputVals1.dump_state(indent + 2u);
  INST_rgChkComplete.dump_state(indent + 2u);
  INST_rgCurInput.dump_state(indent + 2u);
  INST_rgCurInput1.dump_state(indent + 2u);
  INST_rgCurOutput.dump_state(indent + 2u);
  INST_rgCurOutput1.dump_state(indent + 2u);
  INST_rgError.dump_state(indent + 2u);
  INST_rgGenComplete.dump_state(indent + 2u);
  INST_wrongOut.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 24u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_lfsrGenerate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rlCheck", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rlFinish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rlGenerate", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_lfsrGenerate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rlCheck", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rlFinish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rlGenerate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h337", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1003", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1332", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1365", 64u);
  num = INST_doneSet.dump_VCD_defs(num);
  num = INST_ffInputVals.dump_VCD_defs(num);
  num = INST_ffInputVals1.dump_VCD_defs(num);
  num = INST_rgChkComplete.dump_VCD_defs(num);
  num = INST_rgCurInput.dump_VCD_defs(num);
  num = INST_rgCurInput1.dump_VCD_defs(num);
  num = INST_rgCurOutput.dump_VCD_defs(num);
  num = INST_rgCurOutput1.dump_VCD_defs(num);
  num = INST_rgError.dump_VCD_defs(num);
  num = INST_rgGenComplete.dump_VCD_defs(num);
  num = INST_wrongOut.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTestbench::vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_lfsrGenerate) != DEF_CAN_FIRE_RL_lfsrGenerate)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_lfsrGenerate, 1u);
	backing.DEF_CAN_FIRE_RL_lfsrGenerate = DEF_CAN_FIRE_RL_lfsrGenerate;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rlCheck) != DEF_CAN_FIRE_RL_rlCheck)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rlCheck, 1u);
	backing.DEF_CAN_FIRE_RL_rlCheck = DEF_CAN_FIRE_RL_rlCheck;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rlFinish) != DEF_CAN_FIRE_RL_rlFinish)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rlFinish, 1u);
	backing.DEF_CAN_FIRE_RL_rlFinish = DEF_CAN_FIRE_RL_rlFinish;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rlGenerate) != DEF_CAN_FIRE_RL_rlGenerate)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rlGenerate, 1u);
	backing.DEF_CAN_FIRE_RL_rlGenerate = DEF_CAN_FIRE_RL_rlGenerate;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_lfsrGenerate) != DEF_WILL_FIRE_RL_lfsrGenerate)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_lfsrGenerate, 1u);
	backing.DEF_WILL_FIRE_RL_lfsrGenerate = DEF_WILL_FIRE_RL_lfsrGenerate;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rlCheck) != DEF_WILL_FIRE_RL_rlCheck)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rlCheck, 1u);
	backing.DEF_WILL_FIRE_RL_rlCheck = DEF_WILL_FIRE_RL_rlCheck;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rlFinish) != DEF_WILL_FIRE_RL_rlFinish)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rlFinish, 1u);
	backing.DEF_WILL_FIRE_RL_rlFinish = DEF_WILL_FIRE_RL_rlFinish;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rlGenerate) != DEF_WILL_FIRE_RL_rlGenerate)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rlGenerate, 1u);
	backing.DEF_WILL_FIRE_RL_rlGenerate = DEF_WILL_FIRE_RL_rlGenerate;
      }
      ++num;
      if ((backing.DEF__read__h337) != DEF__read__h337)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h337, 32u);
	backing.DEF__read__h337 = DEF__read__h337;
      }
      ++num;
      if ((backing.DEF_v__h1003) != DEF_v__h1003)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1003, 64u);
	backing.DEF_v__h1003 = DEF_v__h1003;
      }
      ++num;
      if ((backing.DEF_v__h1332) != DEF_v__h1332)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1332, 64u);
	backing.DEF_v__h1332 = DEF_v__h1332;
      }
      ++num;
      if ((backing.DEF_v__h1365) != DEF_v__h1365)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1365, 64u);
	backing.DEF_v__h1365 = DEF_v__h1365;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_lfsrGenerate, 1u);
      backing.DEF_CAN_FIRE_RL_lfsrGenerate = DEF_CAN_FIRE_RL_lfsrGenerate;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rlCheck, 1u);
      backing.DEF_CAN_FIRE_RL_rlCheck = DEF_CAN_FIRE_RL_rlCheck;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rlFinish, 1u);
      backing.DEF_CAN_FIRE_RL_rlFinish = DEF_CAN_FIRE_RL_rlFinish;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rlGenerate, 1u);
      backing.DEF_CAN_FIRE_RL_rlGenerate = DEF_CAN_FIRE_RL_rlGenerate;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_lfsrGenerate, 1u);
      backing.DEF_WILL_FIRE_RL_lfsrGenerate = DEF_WILL_FIRE_RL_lfsrGenerate;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rlCheck, 1u);
      backing.DEF_WILL_FIRE_RL_rlCheck = DEF_WILL_FIRE_RL_rlCheck;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rlFinish, 1u);
      backing.DEF_WILL_FIRE_RL_rlFinish = DEF_WILL_FIRE_RL_rlFinish;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rlGenerate, 1u);
      backing.DEF_WILL_FIRE_RL_rlGenerate = DEF_WILL_FIRE_RL_rlGenerate;
      vcd_write_val(sim_hdl, num++, DEF__read__h337, 32u);
      backing.DEF__read__h337 = DEF__read__h337;
      vcd_write_val(sim_hdl, num++, DEF_v__h1003, 64u);
      backing.DEF_v__h1003 = DEF_v__h1003;
      vcd_write_val(sim_hdl, num++, DEF_v__h1332, 64u);
      backing.DEF_v__h1332 = DEF_v__h1332;
      vcd_write_val(sim_hdl, num++, DEF_v__h1365, 64u);
      backing.DEF_v__h1365 = DEF_v__h1365;
    }
}

void MOD_mkTestbench::vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  INST_doneSet.dump_VCD(dt, backing.INST_doneSet);
  INST_ffInputVals.dump_VCD(dt, backing.INST_ffInputVals);
  INST_ffInputVals1.dump_VCD(dt, backing.INST_ffInputVals1);
  INST_rgChkComplete.dump_VCD(dt, backing.INST_rgChkComplete);
  INST_rgCurInput.dump_VCD(dt, backing.INST_rgCurInput);
  INST_rgCurInput1.dump_VCD(dt, backing.INST_rgCurInput1);
  INST_rgCurOutput.dump_VCD(dt, backing.INST_rgCurOutput);
  INST_rgCurOutput1.dump_VCD(dt, backing.INST_rgCurOutput1);
  INST_rgError.dump_VCD(dt, backing.INST_rgError);
  INST_rgGenComplete.dump_VCD(dt, backing.INST_rgGenComplete);
  INST_wrongOut.dump_VCD(dt, backing.INST_wrongOut);
}

void MOD_mkTestbench::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  INST_dut.dump_VCD(dt, levels, backing.INST_dut);
}
