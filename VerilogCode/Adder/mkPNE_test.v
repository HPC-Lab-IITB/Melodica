//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Feb  4 15:26:41 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_compute_request_put        O     1 reg
// compute_response_get           O    17 reg
// RDY_compute_response_get       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// compute_request_put            I    32 reg
// EN_compute_request_put         I     1
// EN_compute_response_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPNE_test(CLK,
		  RST_N,

		  compute_request_put,
		  EN_compute_request_put,
		  RDY_compute_request_put,

		  EN_compute_response_get,
		  compute_response_get,
		  RDY_compute_response_get);
  input  CLK;
  input  RST_N;

  // action method compute_request_put
  input  [31 : 0] compute_request_put;
  input  EN_compute_request_put;
  output RDY_compute_request_put;

  // actionvalue method compute_response_get
  input  EN_compute_response_get;
  output [16 : 0] compute_response_get;
  output RDY_compute_response_get;

  // signals for module outputs
  wire [16 : 0] compute_response_get;
  wire RDY_compute_request_put, RDY_compute_response_get;

  // ports of submodule adder1_fifo_input_reg
  wire [43 : 0] adder1_fifo_input_reg$D_IN, adder1_fifo_input_reg$D_OUT;
  wire adder1_fifo_input_reg$CLR,
       adder1_fifo_input_reg$DEQ,
       adder1_fifo_input_reg$EMPTY_N,
       adder1_fifo_input_reg$ENQ,
       adder1_fifo_input_reg$FULL_N;

  // ports of submodule adder1_fifo_output_reg
  wire [23 : 0] adder1_fifo_output_reg$D_IN, adder1_fifo_output_reg$D_OUT;
  wire adder1_fifo_output_reg$CLR,
       adder1_fifo_output_reg$DEQ,
       adder1_fifo_output_reg$EMPTY_N,
       adder1_fifo_output_reg$ENQ,
       adder1_fifo_output_reg$FULL_N;

  // ports of submodule adder1_fifo_stage0_reg
  wire [66 : 0] adder1_fifo_stage0_reg$D_IN, adder1_fifo_stage0_reg$D_OUT;
  wire adder1_fifo_stage0_reg$CLR,
       adder1_fifo_stage0_reg$DEQ,
       adder1_fifo_stage0_reg$EMPTY_N,
       adder1_fifo_stage0_reg$ENQ,
       adder1_fifo_stage0_reg$FULL_N;

  // ports of submodule adder1_fifo_stage1_reg
  wire [60 : 0] adder1_fifo_stage1_reg$D_IN, adder1_fifo_stage1_reg$D_OUT;
  wire adder1_fifo_stage1_reg$CLR,
       adder1_fifo_stage1_reg$DEQ,
       adder1_fifo_stage1_reg$EMPTY_N,
       adder1_fifo_stage1_reg$ENQ,
       adder1_fifo_stage1_reg$FULL_N;

  // ports of submodule extracter1_fifo_input_reg
  wire [15 : 0] extracter1_fifo_input_reg$D_IN,
		extracter1_fifo_input_reg$D_OUT;
  wire extracter1_fifo_input_reg$CLR,
       extracter1_fifo_input_reg$DEQ,
       extracter1_fifo_input_reg$EMPTY_N,
       extracter1_fifo_input_reg$ENQ,
       extracter1_fifo_input_reg$FULL_N;

  // ports of submodule extracter1_fifo_output_reg
  wire [20 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [17 : 0] extracter1_fifo_stage0_reg$D_IN,
		extracter1_fifo_stage0_reg$D_OUT;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$EMPTY_N,
       extracter1_fifo_stage0_reg$ENQ,
       extracter1_fifo_stage0_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [24 : 0] extracter1_fifo_stage1_reg$D_IN,
		extracter1_fifo_stage1_reg$D_OUT;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$EMPTY_N,
       extracter1_fifo_stage1_reg$ENQ,
       extracter1_fifo_stage1_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [21 : 0] extracter1_fifo_stage2_reg$D_IN,
		extracter1_fifo_stage2_reg$D_OUT;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$EMPTY_N,
       extracter1_fifo_stage2_reg$ENQ,
       extracter1_fifo_stage2_reg$FULL_N;

  // ports of submodule extracter2_fifo_input_reg
  wire [15 : 0] extracter2_fifo_input_reg$D_IN,
		extracter2_fifo_input_reg$D_OUT;
  wire extracter2_fifo_input_reg$CLR,
       extracter2_fifo_input_reg$DEQ,
       extracter2_fifo_input_reg$EMPTY_N,
       extracter2_fifo_input_reg$ENQ,
       extracter2_fifo_input_reg$FULL_N;

  // ports of submodule extracter2_fifo_output_reg
  wire [20 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [17 : 0] extracter2_fifo_stage0_reg$D_IN,
		extracter2_fifo_stage0_reg$D_OUT;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$EMPTY_N,
       extracter2_fifo_stage0_reg$ENQ,
       extracter2_fifo_stage0_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [24 : 0] extracter2_fifo_stage1_reg$D_IN,
		extracter2_fifo_stage1_reg$D_OUT;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$EMPTY_N,
       extracter2_fifo_stage1_reg$ENQ,
       extracter2_fifo_stage1_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [21 : 0] extracter2_fifo_stage2_reg$D_IN,
		extracter2_fifo_stage2_reg$D_OUT;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$EMPTY_N,
       extracter2_fifo_stage2_reg$ENQ,
       extracter2_fifo_stage2_reg$FULL_N;

  // ports of submodule ffI
  wire [31 : 0] ffI$D_IN, ffI$D_OUT;
  wire ffI$CLR, ffI$DEQ, ffI$EMPTY_N, ffI$ENQ, ffI$FULL_N;

  // ports of submodule ffO
  wire [16 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule ffm
  wire [20 : 0] ffm$D_IN;
  wire ffm$CLR, ffm$DEQ, ffm$ENQ;

  // ports of submodule normalizer_fifo_input_reg
  wire [23 : 0] normalizer_fifo_input_reg$D_IN,
		normalizer_fifo_input_reg$D_OUT;
  wire normalizer_fifo_input_reg$CLR,
       normalizer_fifo_input_reg$DEQ,
       normalizer_fifo_input_reg$EMPTY_N,
       normalizer_fifo_input_reg$ENQ,
       normalizer_fifo_input_reg$FULL_N;

  // ports of submodule normalizer_fifo_output_reg
  wire [16 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [37 : 0] normalizer_fifo_stage0_reg$D_IN,
		normalizer_fifo_stage0_reg$D_OUT;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$EMPTY_N,
       normalizer_fifo_stage0_reg$ENQ,
       normalizer_fifo_stage0_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [41 : 0] normalizer_fifo_stage1_reg$D_IN,
		normalizer_fifo_stage1_reg$D_OUT;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$EMPTY_N,
       normalizer_fifo_stage1_reg$ENQ,
       normalizer_fifo_stage1_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [18 : 0] normalizer_fifo_stage2_reg$D_IN,
		normalizer_fifo_stage2_reg$D_OUT;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$EMPTY_N,
       normalizer_fifo_stage2_reg$ENQ,
       normalizer_fifo_stage2_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_adder1_stage_0,
       CAN_FIRE_RL_adder1_stage_1,
       CAN_FIRE_RL_adder1_stage_2,
       CAN_FIRE_RL_extracter1_stage_0,
       CAN_FIRE_RL_extracter1_stage_1,
       CAN_FIRE_RL_extracter1_stage_2,
       CAN_FIRE_RL_extracter1_stage_3,
       CAN_FIRE_RL_extracter2_stage_0,
       CAN_FIRE_RL_extracter2_stage_1,
       CAN_FIRE_RL_extracter2_stage_2,
       CAN_FIRE_RL_extracter2_stage_3,
       CAN_FIRE_RL_normalizer_stage_0,
       CAN_FIRE_RL_normalizer_stage_1,
       CAN_FIRE_RL_normalizer_stage_2,
       CAN_FIRE_RL_normalizer_stage_3,
       CAN_FIRE_RL_rl_connect0,
       CAN_FIRE_RL_rl_connect2,
       CAN_FIRE_RL_rl_in,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_compute_request_put,
       CAN_FIRE_compute_response_get,
       WILL_FIRE_RL_adder1_stage_0,
       WILL_FIRE_RL_adder1_stage_1,
       WILL_FIRE_RL_adder1_stage_2,
       WILL_FIRE_RL_extracter1_stage_0,
       WILL_FIRE_RL_extracter1_stage_1,
       WILL_FIRE_RL_extracter1_stage_2,
       WILL_FIRE_RL_extracter1_stage_3,
       WILL_FIRE_RL_extracter2_stage_0,
       WILL_FIRE_RL_extracter2_stage_1,
       WILL_FIRE_RL_extracter2_stage_2,
       WILL_FIRE_RL_extracter2_stage_3,
       WILL_FIRE_RL_normalizer_stage_0,
       WILL_FIRE_RL_normalizer_stage_1,
       WILL_FIRE_RL_normalizer_stage_2,
       WILL_FIRE_RL_normalizer_stage_3,
       WILL_FIRE_RL_rl_connect0,
       WILL_FIRE_RL_rl_connect2,
       WILL_FIRE_RL_rl_in,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_compute_request_put,
       WILL_FIRE_compute_response_get;

  // remaining internal signals
  reg [24 : 0] x__h12417;
  reg [15 : 0] output_regf_out_posit__h28258;
  reg [11 : 0] x__h11327, x__h5685;
  wire [25 : 0] frac_sign__h12559,
		frac_sign__h12566,
		frac_sign__h12571,
		x__h12785,
		x__h16512,
		x__h20196;
  wire [24 : 0] IF_INV_adder1_fifo_stage1_reg_first__05_BIT_51_ETC___d690,
		IF_adder1_fifo_stage0_reg_first__68_BITS_1_TO__ETC___d487,
		b__h12346,
		c__h12343,
		f1__h12307,
		f2__h12308,
		x__h12360;
  wire [23 : 0] x__h12174, x__h12188;
  wire [14 : 0] IF_normalizer_fifo_stage1_reg_first__04_BITS_3_ETC___d858,
		INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1,
		INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2,
		b__h25630,
		b__h27043,
		b__h27499,
		k__h24627,
		k__h24672,
		normalizer_fifo_stage0_reg_first__40_BITS_33_T_ETC___d766,
		normalizer_fifo_stage1_reg_first__04_BITS_37_T_ETC___d854,
		stage0_regf_k__h24537,
		stage0_regf_new_inp0__h6507,
		stage0_regf_new_inp0__h839,
		stage1_regf_k_expo__h25291,
		stage2_regf_k_expo_frac__h26846,
		x__h24684,
		x__h27059,
		y__h27060,
		y__h27062;
  wire [12 : 0] extracter1_fifo_stage1_regD_OUT_BITS_16_TO_4__q4,
		extracter2_fifo_stage1_regD_OUT_BITS_16_TO_4__q5,
		x__h26646;
  wire [11 : 0] normalizer_fifo_stage0_regD_OUT_BITS_17_TO_6__q7,
		normalizer_fifo_stage1_regD_OUT_BITS_22_TO_11__q6,
		stage2_regf_frac__h11192,
		stage2_regf_frac__h5548;
  wire [6 : 0] IF_14_MINUS_normalizer_fifo_stage0_reg_first___ETC___d798;
  wire [5 : 0] IF_INV_adder1_fifo_stage1_reg_first__05_BIT_51_ETC___d704,
	       IF_adder1_fifo_stage1_reg_first__05_BITS_50_TO_ETC___d703,
	       SEXT_extracter1_fifo_stage1_regD_OUT_BITS_21_T_ETC__q9,
	       SEXT_extracter2_fifo_stage1_regD_OUT_BITS_21_T_ETC__q11,
	       frac_shift__h12560,
	       frac_shift__h12567,
	       frac_shift__h12572,
	       x__h12408,
	       x__h12434,
	       y__h12796,
	       y__h16513,
	       y__h20197;
  wire [4 : 0] _0_MINUS_normalizer_fifo_input_regD_OUT_BITS_1_ETC__q3,
	       b__h1152,
	       b__h1154,
	       b__h6801,
	       b__h6803,
	       extracter1_fifo_stage1_regD_OUT_BITS_21_TO_17__q8,
	       extracter2_fifo_stage1_regD_OUT_BITS_21_TO_17__q10,
	       x__h12833,
	       x__h16526,
	       x__h20210,
	       x__h3294,
	       x__h8943;
  wire [3 : 0] IF_14_MINUS_normalizer_fifo_stage0_reg_first___ETC___d758,
	       IF_extracter1_fifo_stage0_reg_first__9_BIT_14__ETC___d149,
	       IF_extracter2_fifo_stage0_reg_first__35_BIT_14_ETC___d365,
	       IF_normalizer_fifo_input_reg_first__14_BIT_18__ETC___d728,
	       _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810,
	       _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746,
	       normalizer_fifo_input_reg_first__14_BITS_18_TO_ETC___d724,
	       x__h11291,
	       x__h1162,
	       x__h24670,
	       x__h27197,
	       x__h27297,
	       x__h3301,
	       x__h5649,
	       x__h6811,
	       x__h8950;
  wire [1 : 0] _theResult___snd_snd__h25768,
	       i1__h26758,
	       i__h26702,
	       normalizer_fifo_stage0_reg_first__40_BITS_17_T_ETC___d796,
	       shift_new0__h25271,
	       shift_new__h25712,
	       stage0_regf_zero_flag__h12066,
	       x__h25716;
  wire IF_12_MINUS_normalizer_fifo_stage1_reg_first___ETC___d819,
       IF_normalizer_fifo_stage1_reg_first__04_BITS_3_ETC___d886,
       NOT_12_MINUS_normalizer_fifo_stage1_reg_first__ETC___d884,
       NOT_normalizer_fifo_stage0_reg_first__40_BIT_3_ETC___d771,
       _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d832,
       _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d848,
       _theResult____h26827,
       adder1_fifo_stage0_reg_first__68_BITS_62_TO_57_ETC___d475,
       adder1_fifo_stage1_reg_first__05_BITS_50_TO_26_ETC___d512,
       c__h25646,
       expo_masked__h25272,
       normalizer_fifo_stage0_reg_first__40_BIT_0_87__ETC___d790,
       normalizer_fifo_stage0_reg_first__40_BIT_18_44_ETC___d749,
       normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d813,
       normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d818,
       normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d862,
       x__h11223,
       x__h12057,
       x__h12496,
       x__h12529,
       x__h23950,
       x__h26664,
       x__h26688,
       x__h5581,
       y__h26748,
       y__h26752;

  // action method compute_request_put
  assign RDY_compute_request_put = ffI$FULL_N ;
  assign CAN_FIRE_compute_request_put = ffI$FULL_N ;
  assign WILL_FIRE_compute_request_put = EN_compute_request_put ;

  // actionvalue method compute_response_get
  assign compute_response_get = ffO$D_OUT ;
  assign RDY_compute_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_compute_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_compute_response_get = EN_compute_response_get ;

  // submodule adder1_fifo_input_reg
  FIFO2 #(.width(32'd44), .guarded(32'd1)) adder1_fifo_input_reg(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(adder1_fifo_input_reg$D_IN),
								 .ENQ(adder1_fifo_input_reg$ENQ),
								 .DEQ(adder1_fifo_input_reg$DEQ),
								 .CLR(adder1_fifo_input_reg$CLR),
								 .D_OUT(adder1_fifo_input_reg$D_OUT),
								 .FULL_N(adder1_fifo_input_reg$FULL_N),
								 .EMPTY_N(adder1_fifo_input_reg$EMPTY_N));

  // submodule adder1_fifo_output_reg
  FIFO2 #(.width(32'd24), .guarded(32'd1)) adder1_fifo_output_reg(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(adder1_fifo_output_reg$D_IN),
								  .ENQ(adder1_fifo_output_reg$ENQ),
								  .DEQ(adder1_fifo_output_reg$DEQ),
								  .CLR(adder1_fifo_output_reg$CLR),
								  .D_OUT(adder1_fifo_output_reg$D_OUT),
								  .FULL_N(adder1_fifo_output_reg$FULL_N),
								  .EMPTY_N(adder1_fifo_output_reg$EMPTY_N));

  // submodule adder1_fifo_stage0_reg
  FIFO2 #(.width(32'd67), .guarded(32'd1)) adder1_fifo_stage0_reg(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(adder1_fifo_stage0_reg$D_IN),
								  .ENQ(adder1_fifo_stage0_reg$ENQ),
								  .DEQ(adder1_fifo_stage0_reg$DEQ),
								  .CLR(adder1_fifo_stage0_reg$CLR),
								  .D_OUT(adder1_fifo_stage0_reg$D_OUT),
								  .FULL_N(adder1_fifo_stage0_reg$FULL_N),
								  .EMPTY_N(adder1_fifo_stage0_reg$EMPTY_N));

  // submodule adder1_fifo_stage1_reg
  FIFO2 #(.width(32'd61), .guarded(32'd1)) adder1_fifo_stage1_reg(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(adder1_fifo_stage1_reg$D_IN),
								  .ENQ(adder1_fifo_stage1_reg$ENQ),
								  .DEQ(adder1_fifo_stage1_reg$DEQ),
								  .CLR(adder1_fifo_stage1_reg$CLR),
								  .D_OUT(adder1_fifo_stage1_reg$D_OUT),
								  .FULL_N(adder1_fifo_stage1_reg$FULL_N),
								  .EMPTY_N(adder1_fifo_stage1_reg$EMPTY_N));

  // submodule extracter1_fifo_input_reg
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) extracter1_fifo_input_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter1_fifo_input_reg$D_IN),
						     .ENQ(extracter1_fifo_input_reg$ENQ),
						     .DEQ(extracter1_fifo_input_reg$DEQ),
						     .CLR(extracter1_fifo_input_reg$CLR),
						     .D_OUT(extracter1_fifo_input_reg$D_OUT),
						     .FULL_N(extracter1_fifo_input_reg$FULL_N),
						     .EMPTY_N(extracter1_fifo_input_reg$EMPTY_N));

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(extracter1_fifo_stage0_reg$D_OUT),
						      .FULL_N(extracter1_fifo_stage0_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_stage0_reg$EMPTY_N));

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd25),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(extracter1_fifo_stage1_reg$D_OUT),
						      .FULL_N(extracter1_fifo_stage1_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_stage1_reg$EMPTY_N));

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd22),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(extracter1_fifo_stage2_reg$D_OUT),
						      .FULL_N(extracter1_fifo_stage2_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_stage2_reg$EMPTY_N));

  // submodule extracter2_fifo_input_reg
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) extracter2_fifo_input_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(extracter2_fifo_input_reg$D_IN),
						     .ENQ(extracter2_fifo_input_reg$ENQ),
						     .DEQ(extracter2_fifo_input_reg$DEQ),
						     .CLR(extracter2_fifo_input_reg$CLR),
						     .D_OUT(extracter2_fifo_input_reg$D_OUT),
						     .FULL_N(extracter2_fifo_input_reg$FULL_N),
						     .EMPTY_N(extracter2_fifo_input_reg$EMPTY_N));

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(extracter2_fifo_stage0_reg$D_OUT),
						      .FULL_N(extracter2_fifo_stage0_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_stage0_reg$EMPTY_N));

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd25),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(extracter2_fifo_stage1_reg$D_OUT),
						      .FULL_N(extracter2_fifo_stage1_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_stage1_reg$EMPTY_N));

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd22),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(extracter2_fifo_stage2_reg$D_OUT),
						      .FULL_N(extracter2_fifo_stage2_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_stage2_reg$EMPTY_N));

  // submodule ffI
  FIFO2 #(.width(32'd32), .guarded(32'd1)) ffI(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffI$D_IN),
					       .ENQ(ffI$ENQ),
					       .DEQ(ffI$DEQ),
					       .CLR(ffI$CLR),
					       .D_OUT(ffI$D_OUT),
					       .FULL_N(ffI$FULL_N),
					       .EMPTY_N(ffI$EMPTY_N));

  // submodule ffO
  FIFO2 #(.width(32'd17), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule ffm
  FIFO2 #(.width(32'd21), .guarded(32'd1)) ffm(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffm$D_IN),
					       .ENQ(ffm$ENQ),
					       .DEQ(ffm$DEQ),
					       .CLR(ffm$CLR),
					       .D_OUT(),
					       .FULL_N(),
					       .EMPTY_N());

  // submodule normalizer_fifo_input_reg
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) normalizer_fifo_input_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(normalizer_fifo_input_reg$D_IN),
						     .ENQ(normalizer_fifo_input_reg$ENQ),
						     .DEQ(normalizer_fifo_input_reg$DEQ),
						     .CLR(normalizer_fifo_input_reg$CLR),
						     .D_OUT(normalizer_fifo_input_reg$D_OUT),
						     .FULL_N(normalizer_fifo_input_reg$FULL_N),
						     .EMPTY_N(normalizer_fifo_input_reg$EMPTY_N));

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd17),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd38),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(normalizer_fifo_stage0_reg$D_OUT),
						      .FULL_N(normalizer_fifo_stage0_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_stage0_reg$EMPTY_N));

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd42),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(normalizer_fifo_stage1_reg$D_OUT),
						      .FULL_N(normalizer_fifo_stage1_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_stage1_reg$EMPTY_N));

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd19),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(normalizer_fifo_stage2_reg$D_OUT),
						      .FULL_N(normalizer_fifo_stage2_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_stage2_reg$EMPTY_N));

  // rule RL_rl_in
  assign CAN_FIRE_RL_rl_in =
	     extracter1_fifo_input_reg$FULL_N && ffI$EMPTY_N &&
	     extracter2_fifo_input_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_in = CAN_FIRE_RL_rl_in ;

  // rule RL_rl_connect0
  assign CAN_FIRE_RL_rl_connect0 =
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     adder1_fifo_input_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect0 = CAN_FIRE_RL_rl_connect0 ;

  // rule RL_rl_connect2
  assign CAN_FIRE_RL_rl_connect2 =
	     adder1_fifo_output_reg$EMPTY_N &&
	     normalizer_fifo_input_reg$FULL_N ;
  assign WILL_FIRE_RL_rl_connect2 = CAN_FIRE_RL_rl_connect2 ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     normalizer_fifo_output_reg$EMPTY_N && ffO$FULL_N ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_extracter1_stage_0
  assign CAN_FIRE_RL_extracter1_stage_0 =
	     extracter1_fifo_input_reg$EMPTY_N &&
	     extracter1_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_extracter1_stage_0 = CAN_FIRE_RL_extracter1_stage_0 ;

  // rule RL_extracter1_stage_1
  assign CAN_FIRE_RL_extracter1_stage_1 =
	     extracter1_fifo_stage0_reg$EMPTY_N &&
	     extracter1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_extracter1_stage_1 = CAN_FIRE_RL_extracter1_stage_1 ;

  // rule RL_extracter1_stage_2
  assign CAN_FIRE_RL_extracter1_stage_2 =
	     extracter1_fifo_stage1_reg$EMPTY_N &&
	     extracter1_fifo_stage2_reg$FULL_N ;
  assign WILL_FIRE_RL_extracter1_stage_2 = CAN_FIRE_RL_extracter1_stage_2 ;

  // rule RL_extracter1_stage_3
  assign CAN_FIRE_RL_extracter1_stage_3 =
	     extracter1_fifo_stage2_reg$EMPTY_N &&
	     extracter1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_extracter1_stage_3 = CAN_FIRE_RL_extracter1_stage_3 ;

  // rule RL_extracter2_stage_0
  assign CAN_FIRE_RL_extracter2_stage_0 =
	     extracter2_fifo_input_reg$EMPTY_N &&
	     extracter2_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_extracter2_stage_0 = CAN_FIRE_RL_extracter2_stage_0 ;

  // rule RL_extracter2_stage_1
  assign CAN_FIRE_RL_extracter2_stage_1 =
	     extracter2_fifo_stage0_reg$EMPTY_N &&
	     extracter2_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_extracter2_stage_1 = CAN_FIRE_RL_extracter2_stage_1 ;

  // rule RL_extracter2_stage_2
  assign CAN_FIRE_RL_extracter2_stage_2 =
	     extracter2_fifo_stage1_reg$EMPTY_N &&
	     extracter2_fifo_stage2_reg$FULL_N ;
  assign WILL_FIRE_RL_extracter2_stage_2 = CAN_FIRE_RL_extracter2_stage_2 ;

  // rule RL_extracter2_stage_3
  assign CAN_FIRE_RL_extracter2_stage_3 =
	     extracter2_fifo_stage2_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_extracter2_stage_3 = CAN_FIRE_RL_extracter2_stage_3 ;

  // rule RL_adder1_stage_0
  assign CAN_FIRE_RL_adder1_stage_0 =
	     adder1_fifo_input_reg$EMPTY_N && adder1_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_adder1_stage_0 = CAN_FIRE_RL_adder1_stage_0 ;

  // rule RL_adder1_stage_1
  assign CAN_FIRE_RL_adder1_stage_1 =
	     adder1_fifo_stage0_reg$EMPTY_N && adder1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_adder1_stage_1 = CAN_FIRE_RL_adder1_stage_1 ;

  // rule RL_adder1_stage_2
  assign CAN_FIRE_RL_adder1_stage_2 =
	     adder1_fifo_stage1_reg$EMPTY_N && adder1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_adder1_stage_2 = CAN_FIRE_RL_adder1_stage_2 ;

  // rule RL_normalizer_stage_0
  assign CAN_FIRE_RL_normalizer_stage_0 =
	     normalizer_fifo_input_reg$EMPTY_N &&
	     normalizer_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_normalizer_stage_0 = CAN_FIRE_RL_normalizer_stage_0 ;

  // rule RL_normalizer_stage_1
  assign CAN_FIRE_RL_normalizer_stage_1 =
	     normalizer_fifo_stage0_reg$EMPTY_N &&
	     normalizer_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_normalizer_stage_1 = CAN_FIRE_RL_normalizer_stage_1 ;

  // rule RL_normalizer_stage_2
  assign CAN_FIRE_RL_normalizer_stage_2 =
	     normalizer_fifo_stage1_reg$EMPTY_N &&
	     normalizer_fifo_stage2_reg$FULL_N ;
  assign WILL_FIRE_RL_normalizer_stage_2 = CAN_FIRE_RL_normalizer_stage_2 ;

  // rule RL_normalizer_stage_3
  assign CAN_FIRE_RL_normalizer_stage_3 =
	     normalizer_fifo_stage2_reg$EMPTY_N &&
	     normalizer_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_normalizer_stage_3 = CAN_FIRE_RL_normalizer_stage_3 ;

  // submodule adder1_fifo_input_reg
  assign adder1_fifo_input_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[18],
	       1'b0,
	       extracter1_fifo_output_reg$D_OUT[20:19],
	       extracter1_fifo_output_reg$D_OUT[17:0],
	       extracter2_fifo_output_reg$D_OUT[18],
	       1'b0,
	       extracter2_fifo_output_reg$D_OUT[20:19],
	       extracter2_fifo_output_reg$D_OUT[17:0] } ;
  assign adder1_fifo_input_reg$ENQ = CAN_FIRE_RL_rl_connect0 ;
  assign adder1_fifo_input_reg$DEQ = CAN_FIRE_RL_adder1_stage_0 ;
  assign adder1_fifo_input_reg$CLR = 1'b0 ;

  // submodule adder1_fifo_output_reg
  assign adder1_fifo_output_reg$D_IN =
	     { x__h12496,
	       (!IF_INV_adder1_fifo_stage1_reg_first__05_BIT_51_ETC___d690[24] &&
		adder1_fifo_stage1_reg$D_OUT[59:58] == 2'd0) ?
		 2'd2 :
		 adder1_fifo_stage1_reg$D_OUT[59:58],
	       adder1_fifo_stage1_reg$D_OUT[60],
	       IF_INV_adder1_fifo_stage1_reg_first__05_BIT_51_ETC___d704,
	       IF_INV_adder1_fifo_stage1_reg_first__05_BIT_51_ETC___d690[23:11],
	       x__h23950 } ;
  assign adder1_fifo_output_reg$ENQ = CAN_FIRE_RL_adder1_stage_2 ;
  assign adder1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect2 ;
  assign adder1_fifo_output_reg$CLR = 1'b0 ;

  // submodule adder1_fifo_stage0_reg
  assign adder1_fifo_stage0_reg$D_IN =
	     { x__h12057,
	       (adder1_fifo_input_reg$D_OUT[41:40] == 2'd2 &&
		adder1_fifo_input_reg$D_OUT[19:18] == 2'd2) ?
		 2'd2 :
		 ((adder1_fifo_input_reg$D_OUT[41:40] == 2'd1 ||
		   adder1_fifo_input_reg$D_OUT[19:18] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       adder1_fifo_input_reg$D_OUT[43],
	       adder1_fifo_input_reg$D_OUT[39:34],
	       x__h12174,
	       adder1_fifo_input_reg$D_OUT[21],
	       adder1_fifo_input_reg$D_OUT[17:12],
	       x__h12188,
	       stage0_regf_zero_flag__h12066 } ;
  assign adder1_fifo_stage0_reg$ENQ = CAN_FIRE_RL_adder1_stage_0 ;
  assign adder1_fifo_stage0_reg$DEQ = CAN_FIRE_RL_adder1_stage_1 ;
  assign adder1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule adder1_fifo_stage1_reg
  assign adder1_fifo_stage1_reg$D_IN =
	     { adder1_fifo_stage0_reg$D_OUT[66:64],
	       (adder1_fifo_stage0_reg$D_OUT[1:0] == 2'b01) ?
		 adder1_fifo_stage0_reg$D_OUT[31:26] :
		 ((adder1_fifo_stage0_reg$D_OUT[1:0] == 2'b10 ||
		   !adder1_fifo_stage0_reg_first__68_BITS_62_TO_57_ETC___d475) ?
		    adder1_fifo_stage0_reg$D_OUT[62:57] :
		    adder1_fifo_stage0_reg$D_OUT[31:26]),
	       adder1_fifo_stage0_reg$D_OUT[63],
	       x__h12360,
	       adder1_fifo_stage0_reg$D_OUT[32],
	       x__h12417 } ;
  assign adder1_fifo_stage1_reg$ENQ = CAN_FIRE_RL_adder1_stage_1 ;
  assign adder1_fifo_stage1_reg$DEQ = CAN_FIRE_RL_adder1_stage_2 ;
  assign adder1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_input_reg
  assign extracter1_fifo_input_reg$D_IN = ffI$D_OUT[31:16] ;
  assign extracter1_fifo_input_reg$ENQ = CAN_FIRE_RL_rl_in ;
  assign extracter1_fifo_input_reg$DEQ = CAN_FIRE_RL_extracter1_stage_0 ;
  assign extracter1_fifo_input_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { extracter1_fifo_stage2_reg$D_OUT[21:19],
	       (extracter1_fifo_stage2_reg$D_OUT[21:20] == 2'd2) ?
		 18'd0 :
		 { extracter1_fifo_stage2_reg$D_OUT[18:13] +
		   { 5'd0, extracter1_fifo_stage2_reg$D_OUT[12] },
		   extracter1_fifo_stage2_reg$D_OUT[11:0] } } ;
  assign extracter1_fifo_output_reg$ENQ = CAN_FIRE_RL_extracter1_stage_3 ;
  assign extracter1_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN =
	     { (extracter1_fifo_input_reg$D_OUT[14:0] == 15'd0 &&
		!extracter1_fifo_input_reg$D_OUT[15]) ?
		 2'd2 :
		 ((extracter1_fifo_input_reg$D_OUT[14:0] == 15'd0 &&
		   extracter1_fifo_input_reg$D_OUT[15]) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_input_reg$D_OUT[15],
	       stage0_regf_new_inp0__h839 } ;
  assign extracter1_fifo_stage0_reg$ENQ = CAN_FIRE_RL_extracter1_stage_0 ;
  assign extracter1_fifo_stage0_reg$DEQ = CAN_FIRE_RL_extracter1_stage_1 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN =
	     { extracter1_fifo_stage0_reg$D_OUT[17:15],
	       extracter1_fifo_stage0_reg$D_OUT[14] ? b__h1152 : b__h1154,
	       extracter1_fifo_stage0_reg$D_OUT[12:0],
	       IF_extracter1_fifo_stage0_reg_first__9_BIT_14__ETC___d149 } ;
  assign extracter1_fifo_stage1_reg$ENQ = CAN_FIRE_RL_extracter1_stage_1 ;
  assign extracter1_fifo_stage1_reg$DEQ = CAN_FIRE_RL_extracter1_stage_2 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN =
	     { extracter1_fifo_stage1_reg$D_OUT[24:22],
	       SEXT_extracter1_fifo_stage1_regD_OUT_BITS_21_T_ETC__q9[4:0],
	       1'd0,
	       x__h5581,
	       stage2_regf_frac__h5548 } ;
  assign extracter1_fifo_stage2_reg$ENQ = CAN_FIRE_RL_extracter1_stage_2 ;
  assign extracter1_fifo_stage2_reg$DEQ = CAN_FIRE_RL_extracter1_stage_3 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_input_reg
  assign extracter2_fifo_input_reg$D_IN = ffI$D_OUT[15:0] ;
  assign extracter2_fifo_input_reg$ENQ = CAN_FIRE_RL_rl_in ;
  assign extracter2_fifo_input_reg$DEQ = CAN_FIRE_RL_extracter2_stage_0 ;
  assign extracter2_fifo_input_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { extracter2_fifo_stage2_reg$D_OUT[21:19],
	       (extracter2_fifo_stage2_reg$D_OUT[21:20] == 2'd2) ?
		 18'd0 :
		 { extracter2_fifo_stage2_reg$D_OUT[18:13] +
		   { 5'd0, extracter2_fifo_stage2_reg$D_OUT[12] },
		   extracter2_fifo_stage2_reg$D_OUT[11:0] } } ;
  assign extracter2_fifo_output_reg$ENQ = CAN_FIRE_RL_extracter2_stage_3 ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_connect0 ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN =
	     { (extracter2_fifo_input_reg$D_OUT[14:0] == 15'd0 &&
		!extracter2_fifo_input_reg$D_OUT[15]) ?
		 2'd2 :
		 ((extracter2_fifo_input_reg$D_OUT[14:0] == 15'd0 &&
		   extracter2_fifo_input_reg$D_OUT[15]) ?
		    2'd1 :
		    2'd0),
	       extracter2_fifo_input_reg$D_OUT[15],
	       stage0_regf_new_inp0__h6507 } ;
  assign extracter2_fifo_stage0_reg$ENQ = CAN_FIRE_RL_extracter2_stage_0 ;
  assign extracter2_fifo_stage0_reg$DEQ = CAN_FIRE_RL_extracter2_stage_1 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN =
	     { extracter2_fifo_stage0_reg$D_OUT[17:15],
	       extracter2_fifo_stage0_reg$D_OUT[14] ? b__h6801 : b__h6803,
	       extracter2_fifo_stage0_reg$D_OUT[12:0],
	       IF_extracter2_fifo_stage0_reg_first__35_BIT_14_ETC___d365 } ;
  assign extracter2_fifo_stage1_reg$ENQ = CAN_FIRE_RL_extracter2_stage_1 ;
  assign extracter2_fifo_stage1_reg$DEQ = CAN_FIRE_RL_extracter2_stage_2 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN =
	     { extracter2_fifo_stage1_reg$D_OUT[24:22],
	       SEXT_extracter2_fifo_stage1_regD_OUT_BITS_21_T_ETC__q11[4:0],
	       1'd0,
	       x__h11223,
	       stage2_regf_frac__h11192 } ;
  assign extracter2_fifo_stage2_reg$ENQ = CAN_FIRE_RL_extracter2_stage_2 ;
  assign extracter2_fifo_stage2_reg$DEQ = CAN_FIRE_RL_extracter2_stage_3 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffI
  assign ffI$D_IN = compute_request_put ;
  assign ffI$ENQ = EN_compute_request_put ;
  assign ffI$DEQ = CAN_FIRE_RL_rl_in ;
  assign ffI$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN = normalizer_fifo_output_reg$D_OUT ;
  assign ffO$ENQ = CAN_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_compute_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule ffm
  assign ffm$D_IN = 21'h0 ;
  assign ffm$ENQ = 1'b0 ;
  assign ffm$DEQ = 1'b0 ;
  assign ffm$CLR = 1'b0 ;

  // submodule normalizer_fifo_input_reg
  assign normalizer_fifo_input_reg$D_IN = adder1_fifo_output_reg$D_OUT ;
  assign normalizer_fifo_input_reg$ENQ = CAN_FIRE_RL_rl_connect2 ;
  assign normalizer_fifo_input_reg$DEQ = CAN_FIRE_RL_normalizer_stage_0 ;
  assign normalizer_fifo_input_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     { normalizer_fifo_stage2_reg$D_OUT[15],
	       output_regf_out_posit__h28258 } ;
  assign normalizer_fifo_output_reg$ENQ = CAN_FIRE_RL_normalizer_stage_3 ;
  assign normalizer_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_out ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN =
	     { normalizer_fifo_input_reg$D_OUT[23:20],
	       stage0_regf_k__h24537,
	       normalizer_fifo_input_reg$D_OUT[14:2],
	       normalizer_fifo_input_reg$D_OUT[19] ?
		 _0_MINUS_normalizer_fifo_input_regD_OUT_BITS_1_ETC__q3[3:0] :
		 IF_normalizer_fifo_input_reg_first__14_BIT_18__ETC___d728,
	       normalizer_fifo_input_reg$D_OUT[1:0] } ;
  assign normalizer_fifo_stage0_reg$ENQ = CAN_FIRE_RL_normalizer_stage_0 ;
  assign normalizer_fifo_stage0_reg$DEQ = CAN_FIRE_RL_normalizer_stage_1 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN =
	     { normalizer_fifo_stage0_reg$D_OUT[37:34],
	       stage1_regf_k_expo__h25291,
	       x__h26646[11:0],
	       normalizer_fifo_stage0_reg$D_OUT[5:2],
	       IF_14_MINUS_normalizer_fifo_stage0_reg_first___ETC___d798 } ;
  assign normalizer_fifo_stage1_reg$ENQ = CAN_FIRE_RL_normalizer_stage_1 ;
  assign normalizer_fifo_stage1_reg$DEQ = CAN_FIRE_RL_normalizer_stage_2 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN =
	     { normalizer_fifo_stage1_reg$D_OUT[41:38],
	       stage2_regf_k_expo_frac__h26846 } ;
  assign normalizer_fifo_stage2_reg$ENQ = CAN_FIRE_RL_normalizer_stage_2 ;
  assign normalizer_fifo_stage2_reg$DEQ = CAN_FIRE_RL_normalizer_stage_3 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_12_MINUS_normalizer_fifo_stage1_reg_first___ETC___d819 =
	     (_12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 ==
	      4'd0) ?
	       normalizer_fifo_stage1_reg$D_OUT[1] :
	       normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d818 ;
  assign IF_14_MINUS_normalizer_fifo_stage0_reg_first___ETC___d758 =
	     (_14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 ==
	      4'd0) ?
	       _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 :
	       _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 -
	       4'd1 ;
  assign IF_14_MINUS_normalizer_fifo_stage0_reg_first___ETC___d798 =
	     { IF_14_MINUS_normalizer_fifo_stage0_reg_first___ETC___d758,
	       x__h26688,
	       (shift_new0__h25271 == 2'd0) ?
		 normalizer_fifo_stage0_reg$D_OUT[1:0] :
		 normalizer_fifo_stage0_reg_first__40_BITS_17_T_ETC___d796 } ;
  assign IF_INV_adder1_fifo_stage1_reg_first__05_BIT_51_ETC___d690 =
	     (~x__h12529) ?
	       x__h12785[24:0] :
	       (adder1_fifo_stage1_reg_first__05_BITS_50_TO_26_ETC___d512 ?
		  x__h20196[24:0] :
		  x__h16512[24:0]) ;
  assign IF_INV_adder1_fifo_stage1_reg_first__05_BIT_51_ETC___d704 =
	     (~x__h12529) ?
	       adder1_fifo_stage1_reg$D_OUT[57:52] -
	       (frac_shift__h12560 - 6'd1) :
	       IF_adder1_fifo_stage1_reg_first__05_BITS_50_TO_ETC___d703 ;
  assign IF_adder1_fifo_stage0_reg_first__68_BITS_1_TO__ETC___d487 =
	     (adder1_fifo_stage0_reg$D_OUT[1:0] == 2'b10 ||
	      !adder1_fifo_stage0_reg_first__68_BITS_62_TO_57_ETC___d475) ?
	       f1__h12307 :
	       b__h12346 ;
  assign IF_adder1_fifo_stage1_reg_first__05_BITS_50_TO_ETC___d703 =
	     adder1_fifo_stage1_reg_first__05_BITS_50_TO_26_ETC___d512 ?
	       adder1_fifo_stage1_reg$D_OUT[57:52] - y__h20197 :
	       adder1_fifo_stage1_reg$D_OUT[57:52] - y__h16513 ;
  assign IF_extracter1_fifo_stage0_reg_first__9_BIT_14__ETC___d149 =
	     extracter1_fifo_stage0_reg$D_OUT[14] ?
	       ((!INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[14] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[13] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[12] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[11] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[10] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[9] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[8] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[7] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[6] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[5] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[4] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[3] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[2] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[1] &&
		 !INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h1162 :
	       ((!extracter1_fifo_stage0_reg$D_OUT[13] &&
		 !extracter1_fifo_stage0_reg$D_OUT[12] &&
		 !extracter1_fifo_stage0_reg$D_OUT[11] &&
		 !extracter1_fifo_stage0_reg$D_OUT[10] &&
		 !extracter1_fifo_stage0_reg$D_OUT[9] &&
		 !extracter1_fifo_stage0_reg$D_OUT[8] &&
		 !extracter1_fifo_stage0_reg$D_OUT[7] &&
		 !extracter1_fifo_stage0_reg$D_OUT[6] &&
		 !extracter1_fifo_stage0_reg$D_OUT[5] &&
		 !extracter1_fifo_stage0_reg$D_OUT[4] &&
		 !extracter1_fifo_stage0_reg$D_OUT[3] &&
		 !extracter1_fifo_stage0_reg$D_OUT[2] &&
		 !extracter1_fifo_stage0_reg$D_OUT[1] &&
		 !extracter1_fifo_stage0_reg$D_OUT[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h3301 ;
  assign IF_extracter2_fifo_stage0_reg_first__35_BIT_14_ETC___d365 =
	     extracter2_fifo_stage0_reg$D_OUT[14] ?
	       ((!INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[14] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[13] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[12] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[11] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[10] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[9] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[8] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[7] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[6] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[5] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[4] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[3] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[2] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[1] &&
		 !INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h6811 :
	       ((!extracter2_fifo_stage0_reg$D_OUT[13] &&
		 !extracter2_fifo_stage0_reg$D_OUT[12] &&
		 !extracter2_fifo_stage0_reg$D_OUT[11] &&
		 !extracter2_fifo_stage0_reg$D_OUT[10] &&
		 !extracter2_fifo_stage0_reg$D_OUT[9] &&
		 !extracter2_fifo_stage0_reg$D_OUT[8] &&
		 !extracter2_fifo_stage0_reg$D_OUT[7] &&
		 !extracter2_fifo_stage0_reg$D_OUT[6] &&
		 !extracter2_fifo_stage0_reg$D_OUT[5] &&
		 !extracter2_fifo_stage0_reg$D_OUT[4] &&
		 !extracter2_fifo_stage0_reg$D_OUT[3] &&
		 !extracter2_fifo_stage0_reg$D_OUT[2] &&
		 !extracter2_fifo_stage0_reg$D_OUT[1] &&
		 !extracter2_fifo_stage0_reg$D_OUT[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h8950 ;
  assign IF_normalizer_fifo_input_reg_first__14_BIT_18__ETC___d728 =
	     (normalizer_fifo_input_reg$D_OUT[18] &&
	      !normalizer_fifo_input_reg_first__14_BITS_18_TO_ETC___d724[3]) ?
	       4'd15 :
	       normalizer_fifo_input_reg_first__14_BITS_18_TO_ETC___d724 ;
  assign IF_normalizer_fifo_stage1_reg_first__04_BITS_3_ETC___d858 =
	     (b__h27043[14] &&
	      !normalizer_fifo_stage1_reg_first__04_BITS_37_T_ETC___d854[14]) ?
	       15'd32767 :
	       normalizer_fifo_stage1_reg_first__04_BITS_37_T_ETC___d854 ;
  assign IF_normalizer_fifo_stage1_reg_first__04_BITS_3_ETC___d886 =
	     IF_normalizer_fifo_stage1_reg_first__04_BITS_3_ETC___d858 ==
	     15'd0 &&
	     (normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d862 ||
	      !normalizer_fifo_stage1_reg$D_OUT[0] ||
	      normalizer_fifo_stage1_reg$D_OUT[6:3] == 4'd0 &&
	      !(~normalizer_fifo_stage1_reg$D_OUT[23]) ||
	      NOT_12_MINUS_normalizer_fifo_stage1_reg_first__ETC___d884) ;
  assign INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1 =
	     ~extracter1_fifo_stage0_reg$D_OUT[14:0] ;
  assign INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2 =
	     ~extracter2_fifo_stage0_reg$D_OUT[14:0] ;
  assign NOT_12_MINUS_normalizer_fifo_stage1_reg_first__ETC___d884 =
	     _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 !=
	     4'd0 &&
	     (_12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 !=
	      4'd1 ||
	      normalizer_fifo_stage1_reg$D_OUT[1]) &&
	     (_12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d832 ||
	      { 20'd0,
		(normalizer_fifo_stage1_reg$D_OUT[22:11] &
		 ~(12'hFFE << x__h27297)) >>
		0 } !=
	      32'd0 ||
	      normalizer_fifo_stage1_reg$D_OUT[1]) &&
	     (!normalizer_fifo_stage1_reg$D_OUT[2] ||
	      !normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d818) &&
	     (normalizer_fifo_stage1_reg$D_OUT[37:23] != 15'd32767 ||
	      normalizer_fifo_stage1_reg$D_OUT[6:3] != 4'd0 ||
	      normalizer_fifo_stage1_reg$D_OUT[22:11] != 12'd0 ||
	      normalizer_fifo_stage1_reg$D_OUT[1]) ;
  assign NOT_normalizer_fifo_stage0_reg_first__40_BIT_3_ETC___d771 =
	     (!normalizer_fifo_stage0_reg$D_OUT[33] && b__h25630[14] ||
	      normalizer_fifo_stage0_reg$D_OUT[33] && !b__h25630[14]) &&
	     !normalizer_fifo_stage0_reg_first__40_BITS_33_T_ETC___d766[14] ||
	     normalizer_fifo_stage0_reg$D_OUT[33] && b__h25630[14] ;
  assign SEXT_extracter1_fifo_stage1_regD_OUT_BITS_21_T_ETC__q9 =
	     { extracter1_fifo_stage1_regD_OUT_BITS_21_TO_17__q8[4],
	       extracter1_fifo_stage1_regD_OUT_BITS_21_TO_17__q8 } ;
  assign SEXT_extracter2_fifo_stage1_regD_OUT_BITS_21_T_ETC__q11 =
	     { extracter2_fifo_stage1_regD_OUT_BITS_21_TO_17__q10[4],
	       extracter2_fifo_stage1_regD_OUT_BITS_21_TO_17__q10 } ;
  assign _0_MINUS_normalizer_fifo_input_regD_OUT_BITS_1_ETC__q3 =
	     5'd0 - normalizer_fifo_input_reg$D_OUT[19:15] ;
  assign _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 =
	     4'd12 - normalizer_fifo_stage1_reg$D_OUT[6:3] ;
  assign _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d832 =
	     _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 <
	     4'd2 ;
  assign _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d848 =
	     _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 ==
	     4'd0 ||
	     _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 ==
	     4'd1 &&
	     !normalizer_fifo_stage1_reg$D_OUT[1] ||
	     !_12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d832 &&
	     { 20'd0,
	       (normalizer_fifo_stage1_reg$D_OUT[22:11] &
		~(12'hFFE << x__h27297)) >>
	       0 } ==
	     32'd0 &&
	     !normalizer_fifo_stage1_reg$D_OUT[1] ||
	     normalizer_fifo_stage1_reg$D_OUT[2] ||
	     normalizer_fifo_stage1_reg$D_OUT[37:23] == 15'd32767 &&
	     normalizer_fifo_stage1_reg$D_OUT[6:3] == 4'd0 &&
	     normalizer_fifo_stage1_reg$D_OUT[22:11] == 12'd0 &&
	     !normalizer_fifo_stage1_reg$D_OUT[1] ;
  assign _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 =
	     4'd14 - normalizer_fifo_stage0_reg$D_OUT[5:2] ;
  assign _theResult____h26827 =
	     !normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d813 &&
	     IF_12_MINUS_normalizer_fifo_stage1_reg_first___ETC___d819 &&
	     normalizer_fifo_stage1_reg$D_OUT[0] &&
	     (normalizer_fifo_stage1_reg$D_OUT[6:3] != 4'd0 ||
	      ~normalizer_fifo_stage1_reg$D_OUT[23]) &&
	     _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d848 ;
  assign _theResult___snd_snd__h25768 =
	     normalizer_fifo_stage0_reg_first__40_BIT_18_44_ETC___d749 ?
	       shift_new__h25712 :
	       2'd0 ;
  assign adder1_fifo_stage0_reg_first__68_BITS_62_TO_57_ETC___d475 =
	     (adder1_fifo_stage0_reg$D_OUT[62:57] ^ 6'h20) <=
	     (adder1_fifo_stage0_reg$D_OUT[31:26] ^ 6'h20) ;
  assign adder1_fifo_stage1_reg_first__05_BITS_50_TO_26_ETC___d512 =
	     adder1_fifo_stage1_reg$D_OUT[50:26] <=
	     adder1_fifo_stage1_reg$D_OUT[24:0] ;
  assign b__h1152 = { 1'd0, x__h1162 } - 5'd1 ;
  assign b__h1154 = 5'd0 - x__h3294 ;
  assign b__h12346 = f1__h12307 >> x__h12408 ;
  assign b__h25630 =
	     { 14'd0, expo_masked__h25272 } <<
	     IF_14_MINUS_normalizer_fifo_stage0_reg_first___ETC___d758 ;
  assign b__h27043 = x__h27059 - y__h27060 ;
  assign b__h27499 =
	     { 14'd0,
	       IF_12_MINUS_normalizer_fifo_stage1_reg_first___ETC___d819 } ;
  assign b__h6801 = { 1'd0, x__h6811 } - 5'd1 ;
  assign b__h6803 = 5'd0 - x__h8943 ;
  assign c__h12343 = f2__h12308 >> x__h12434 ;
  assign c__h25646 =
	     _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 !=
	     4'd0 ||
	     !normalizer_fifo_stage0_reg_first__40_BIT_18_44_ETC___d749 ||
	     x__h25716[0] ;
  assign expo_masked__h25272 =
	     normalizer_fifo_stage0_reg$D_OUT[18] & c__h25646 ;
  assign extracter1_fifo_stage1_regD_OUT_BITS_16_TO_4__q4 =
	     extracter1_fifo_stage1_reg$D_OUT[16:4] ;
  assign extracter1_fifo_stage1_regD_OUT_BITS_21_TO_17__q8 =
	     extracter1_fifo_stage1_reg$D_OUT[21:17] ;
  assign extracter2_fifo_stage1_regD_OUT_BITS_16_TO_4__q5 =
	     extracter2_fifo_stage1_reg$D_OUT[16:4] ;
  assign extracter2_fifo_stage1_regD_OUT_BITS_21_TO_17__q10 =
	     extracter2_fifo_stage1_reg$D_OUT[21:17] ;
  assign f1__h12307 = { 1'd1, adder1_fifo_stage0_reg$D_OUT[56:33] } ;
  assign f2__h12308 = { 1'd1, adder1_fifo_stage0_reg$D_OUT[25:2] } ;
  assign frac_shift__h12560 = { 1'd0, x__h12833 } ;
  assign frac_shift__h12567 = { 1'd0, x__h16526 } ;
  assign frac_shift__h12572 = { 1'd0, x__h20210 } ;
  assign frac_sign__h12559 =
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[50:26] } +
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[24:0] } ;
  assign frac_sign__h12566 =
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[50:26] } -
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[24:0] } ;
  assign frac_sign__h12571 =
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[24:0] } -
	     { 1'd0, adder1_fifo_stage1_reg$D_OUT[50:26] } ;
  assign i1__h26758 = shift_new0__h25271 - 2'd2 ;
  assign i__h26702 = shift_new0__h25271 - 2'd1 ;
  assign k__h24627 = 15'd1 << x__h24670 ;
  assign k__h24672 = ~x__h24684 ;
  assign normalizer_fifo_input_reg_first__14_BITS_18_TO_ETC___d724 =
	     normalizer_fifo_input_reg$D_OUT[18:15] + 4'd1 ;
  assign normalizer_fifo_stage0_regD_OUT_BITS_17_TO_6__q7 =
	     normalizer_fifo_stage0_reg$D_OUT[17:6] ;
  assign normalizer_fifo_stage0_reg_first__40_BITS_17_T_ETC___d796 =
	     { normalizer_fifo_stage0_regD_OUT_BITS_17_TO_6__q7[i__h26702],
	       (shift_new0__h25271 == 2'd1) ?
		 normalizer_fifo_stage0_reg_first__40_BIT_0_87__ETC___d790 :
		 normalizer_fifo_stage0_reg_first__40_BIT_0_87__ETC___d790 &
		 y__h26752 } ;
  assign normalizer_fifo_stage0_reg_first__40_BITS_33_T_ETC___d766 =
	     normalizer_fifo_stage0_reg$D_OUT[33:19] + b__h25630 ;
  assign normalizer_fifo_stage0_reg_first__40_BIT_0_87__ETC___d790 =
	     normalizer_fifo_stage0_reg$D_OUT[0] & y__h26748 ;
  assign normalizer_fifo_stage0_reg_first__40_BIT_18_44_ETC___d749 =
	     normalizer_fifo_stage0_reg$D_OUT[18] &
	     _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 ==
	     4'd0 ;
  assign normalizer_fifo_stage1_regD_OUT_BITS_22_TO_11__q6 =
	     normalizer_fifo_stage1_reg$D_OUT[22:11] ;
  assign normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d813 =
	     normalizer_fifo_stage1_regD_OUT_BITS_22_TO_11__q6[_12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810] ;
  assign normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d818 =
	     normalizer_fifo_stage1_regD_OUT_BITS_22_TO_11__q6[x__h27197] ;
  assign normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d862 =
	     normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d813 ||
	     ((_12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 ==
	       4'd0) ?
		!normalizer_fifo_stage1_reg$D_OUT[1] :
		!normalizer_fifo_stage1_reg_first__04_BITS_22_T_ETC___d818) ;
  assign normalizer_fifo_stage1_reg_first__04_BITS_37_T_ETC___d854 =
	     b__h27043 + b__h27499 ;
  assign shift_new0__h25271 =
	     (_14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 ==
	      4'd0) ?
	       _theResult___snd_snd__h25768 :
	       2'd0 ;
  assign shift_new__h25712 = { 1'd0, x__h26664 } ;
  assign stage0_regf_k__h24537 =
	     normalizer_fifo_input_reg$D_OUT[19] ? k__h24627 : k__h24672 ;
  assign stage0_regf_new_inp0__h6507 =
	     extracter2_fifo_input_reg$D_OUT[15] ?
	       15'd0 - extracter2_fifo_input_reg$D_OUT[14:0] :
	       extracter2_fifo_input_reg$D_OUT[14:0] ;
  assign stage0_regf_new_inp0__h839 =
	     extracter1_fifo_input_reg$D_OUT[15] ?
	       15'd0 - extracter1_fifo_input_reg$D_OUT[14:0] :
	       extracter1_fifo_input_reg$D_OUT[14:0] ;
  assign stage0_regf_zero_flag__h12066 =
	     (adder1_fifo_input_reg$D_OUT[41:40] == 2'd2) ?
	       2'b01 :
	       ((adder1_fifo_input_reg$D_OUT[19:18] == 2'd2) ?
		  adder1_fifo_input_reg$D_OUT[19:18] :
		  2'b0) ;
  assign stage1_regf_k_expo__h25291 =
	     NOT_normalizer_fifo_stage0_reg_first__40_BIT_3_ETC___d771 ?
	       15'd32767 :
	       normalizer_fifo_stage0_reg_first__40_BITS_33_T_ETC___d766 ;
  assign stage2_regf_frac__h11192 =
	     extracter2_fifo_stage1_reg$D_OUT[15:4] << x__h11327 ;
  assign stage2_regf_frac__h5548 =
	     extracter1_fifo_stage1_reg$D_OUT[15:4] << x__h5685 ;
  assign stage2_regf_k_expo_frac__h26846 =
	     IF_normalizer_fifo_stage1_reg_first__04_BITS_3_ETC___d858 +
	     { 14'd0,
	       IF_normalizer_fifo_stage1_reg_first__04_BITS_3_ETC___d886 } ;
  assign x__h11223 =
	     (extracter2_fifo_stage1_reg$D_OUT[3:0] == 4'd0) ?
	       extracter2_fifo_stage1_reg$D_OUT[3:0] != 4'd0 &
	       extracter2_fifo_stage1_reg$D_OUT[4] :
	       extracter2_fifo_stage1_regD_OUT_BITS_16_TO_4__q5[x__h11291] ;
  assign x__h11291 = extracter2_fifo_stage1_reg$D_OUT[3:0] - 4'd1 ;
  assign x__h1162 =
	     INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[14] ?
	       4'd0 :
	       (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[13] ?
		  4'd1 :
		  (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[12] ?
		     4'd2 :
		     (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[11] ?
			4'd3 :
			(INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[10] ?
			   4'd4 :
			   (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[9] ?
			      4'd5 :
			      (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[8] ?
				 4'd6 :
				 (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[7] ?
				    4'd7 :
				    (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[6] ?
				       4'd8 :
				       (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[5] ?
					  4'd9 :
					  (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[4] ?
					     4'd10 :
					     (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[3] ?
						4'd11 :
						(INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[2] ?
						   4'd12 :
						   (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[1] ?
						      4'd13 :
						      (INV_extracter1_fifo_stage0_regD_OUT_BITS_14_TO_0__q1[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h12057 =
	     adder1_fifo_input_reg$D_OUT[41:40] == 2'd1 &&
	     adder1_fifo_input_reg$D_OUT[19:18] == 2'd1 ||
	     adder1_fifo_input_reg$D_OUT[42] ||
	     adder1_fifo_input_reg$D_OUT[20] ;
  assign x__h12174 = { adder1_fifo_input_reg$D_OUT[33:22], 12'd0 } ;
  assign x__h12188 = { adder1_fifo_input_reg$D_OUT[11:0], 12'd0 } ;
  assign x__h12360 =
	     (adder1_fifo_stage0_reg$D_OUT[1:0] == 2'b01) ?
	       25'd0 :
	       IF_adder1_fifo_stage0_reg_first__68_BITS_1_TO__ETC___d487 ;
  assign x__h12408 =
	     adder1_fifo_stage0_reg$D_OUT[31:26] -
	     adder1_fifo_stage0_reg$D_OUT[62:57] ;
  assign x__h12434 =
	     adder1_fifo_stage0_reg$D_OUT[62:57] -
	     adder1_fifo_stage0_reg$D_OUT[31:26] ;
  assign x__h12496 =
	     (~x__h12529 ||
	      !adder1_fifo_stage1_reg_first__05_BITS_50_TO_26_ETC___d512) ?
	       adder1_fifo_stage1_reg$D_OUT[51] :
	       adder1_fifo_stage1_reg$D_OUT[25] ;
  assign x__h12529 =
	     adder1_fifo_stage1_reg$D_OUT[51] ^
	     adder1_fifo_stage1_reg$D_OUT[25] ;
  assign x__h12785 = frac_sign__h12559 >> y__h12796 ;
  assign x__h12833 =
	     frac_sign__h12559[25] ?
	       5'd0 :
	       (frac_sign__h12559[24] ?
		  5'd1 :
		  (frac_sign__h12559[23] ?
		     5'd2 :
		     (frac_sign__h12559[22] ?
			5'd3 :
			(frac_sign__h12559[21] ?
			   5'd4 :
			   (frac_sign__h12559[20] ?
			      5'd5 :
			      (frac_sign__h12559[19] ?
				 5'd6 :
				 (frac_sign__h12559[18] ?
				    5'd7 :
				    (frac_sign__h12559[17] ?
				       5'd8 :
				       (frac_sign__h12559[16] ?
					  5'd9 :
					  (frac_sign__h12559[15] ?
					     5'd10 :
					     (frac_sign__h12559[14] ?
						5'd11 :
						(frac_sign__h12559[13] ?
						   5'd12 :
						   (frac_sign__h12559[12] ?
						      5'd13 :
						      (frac_sign__h12559[11] ?
							 5'd14 :
							 (frac_sign__h12559[10] ?
							    5'd15 :
							    (frac_sign__h12559[9] ?
							       5'd16 :
							       (frac_sign__h12559[8] ?
								  5'd17 :
								  (frac_sign__h12559[7] ?
								     5'd18 :
								     (frac_sign__h12559[6] ?
									5'd19 :
									(frac_sign__h12559[5] ?
									   5'd20 :
									   (frac_sign__h12559[4] ?
									      5'd21 :
									      (frac_sign__h12559[3] ?
										 5'd22 :
										 (frac_sign__h12559[2] ?
										    5'd23 :
										    (frac_sign__h12559[1] ?
										       5'd24 :
										       (frac_sign__h12559[0] ?
											  5'd25 :
											  5'd26))))))))))))))))))))))))) ;
  assign x__h16512 = frac_sign__h12566 << y__h16513 ;
  assign x__h16526 =
	     frac_sign__h12566[25] ?
	       5'd0 :
	       (frac_sign__h12566[24] ?
		  5'd1 :
		  (frac_sign__h12566[23] ?
		     5'd2 :
		     (frac_sign__h12566[22] ?
			5'd3 :
			(frac_sign__h12566[21] ?
			   5'd4 :
			   (frac_sign__h12566[20] ?
			      5'd5 :
			      (frac_sign__h12566[19] ?
				 5'd6 :
				 (frac_sign__h12566[18] ?
				    5'd7 :
				    (frac_sign__h12566[17] ?
				       5'd8 :
				       (frac_sign__h12566[16] ?
					  5'd9 :
					  (frac_sign__h12566[15] ?
					     5'd10 :
					     (frac_sign__h12566[14] ?
						5'd11 :
						(frac_sign__h12566[13] ?
						   5'd12 :
						   (frac_sign__h12566[12] ?
						      5'd13 :
						      (frac_sign__h12566[11] ?
							 5'd14 :
							 (frac_sign__h12566[10] ?
							    5'd15 :
							    (frac_sign__h12566[9] ?
							       5'd16 :
							       (frac_sign__h12566[8] ?
								  5'd17 :
								  (frac_sign__h12566[7] ?
								     5'd18 :
								     (frac_sign__h12566[6] ?
									5'd19 :
									(frac_sign__h12566[5] ?
									   5'd20 :
									   (frac_sign__h12566[4] ?
									      5'd21 :
									      (frac_sign__h12566[3] ?
										 5'd22 :
										 (frac_sign__h12566[2] ?
										    5'd23 :
										    (frac_sign__h12566[1] ?
										       5'd24 :
										       (frac_sign__h12566[0] ?
											  5'd25 :
											  5'd26))))))))))))))))))))))))) ;
  assign x__h20196 = frac_sign__h12571 << y__h20197 ;
  assign x__h20210 =
	     frac_sign__h12571[25] ?
	       5'd0 :
	       (frac_sign__h12571[24] ?
		  5'd1 :
		  (frac_sign__h12571[23] ?
		     5'd2 :
		     (frac_sign__h12571[22] ?
			5'd3 :
			(frac_sign__h12571[21] ?
			   5'd4 :
			   (frac_sign__h12571[20] ?
			      5'd5 :
			      (frac_sign__h12571[19] ?
				 5'd6 :
				 (frac_sign__h12571[18] ?
				    5'd7 :
				    (frac_sign__h12571[17] ?
				       5'd8 :
				       (frac_sign__h12571[16] ?
					  5'd9 :
					  (frac_sign__h12571[15] ?
					     5'd10 :
					     (frac_sign__h12571[14] ?
						5'd11 :
						(frac_sign__h12571[13] ?
						   5'd12 :
						   (frac_sign__h12571[12] ?
						      5'd13 :
						      (frac_sign__h12571[11] ?
							 5'd14 :
							 (frac_sign__h12571[10] ?
							    5'd15 :
							    (frac_sign__h12571[9] ?
							       5'd16 :
							       (frac_sign__h12571[8] ?
								  5'd17 :
								  (frac_sign__h12571[7] ?
								     5'd18 :
								     (frac_sign__h12571[6] ?
									5'd19 :
									(frac_sign__h12571[5] ?
									   5'd20 :
									   (frac_sign__h12571[4] ?
									      5'd21 :
									      (frac_sign__h12571[3] ?
										 5'd22 :
										 (frac_sign__h12571[2] ?
										    5'd23 :
										    (frac_sign__h12571[1] ?
										       5'd24 :
										       (frac_sign__h12571[0] ?
											  5'd25 :
											  5'd26))))))))))))))))))))))))) ;
  assign x__h23950 =
	     IF_INV_adder1_fifo_stage1_reg_first__05_BIT_51_ETC___d690[10:0] ==
	     11'd0 ;
  assign x__h24670 =
	     4'd14 -
	     _0_MINUS_normalizer_fifo_input_regD_OUT_BITS_1_ETC__q3[3:0] ;
  assign x__h24684 =
	     15'd32767 >>
	     IF_normalizer_fifo_input_reg_first__14_BIT_18__ETC___d728 ;
  assign x__h25716 =
	     2'd1 <<
	     _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 ;
  assign x__h26646 =
	     { _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 !=
	       4'd0,
	       normalizer_fifo_stage0_reg$D_OUT[17:6] } >>
	     shift_new0__h25271 ;
  assign x__h26664 = 1'd0 - normalizer_fifo_stage0_reg$D_OUT[18] ;
  assign x__h26688 =
	     _14_MINUS_normalizer_fifo_stage0_reg_first__40__ETC___d746 ==
	     4'd0 &&
	     shift_new0__h25271 == 2'd0 ;
  assign x__h27059 = normalizer_fifo_stage1_reg$D_OUT[37:23] + y__h27062 ;
  assign x__h27197 =
	     _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 -
	     4'd1 ;
  assign x__h27297 =
	     _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 -
	     4'd2 ;
  assign x__h3294 = { 1'd0, x__h3301 } ;
  assign x__h3301 =
	     extracter1_fifo_stage0_reg$D_OUT[14] ?
	       4'd0 :
	       (extracter1_fifo_stage0_reg$D_OUT[13] ?
		  4'd1 :
		  (extracter1_fifo_stage0_reg$D_OUT[12] ?
		     4'd2 :
		     (extracter1_fifo_stage0_reg$D_OUT[11] ?
			4'd3 :
			(extracter1_fifo_stage0_reg$D_OUT[10] ?
			   4'd4 :
			   (extracter1_fifo_stage0_reg$D_OUT[9] ?
			      4'd5 :
			      (extracter1_fifo_stage0_reg$D_OUT[8] ?
				 4'd6 :
				 (extracter1_fifo_stage0_reg$D_OUT[7] ?
				    4'd7 :
				    (extracter1_fifo_stage0_reg$D_OUT[6] ?
				       4'd8 :
				       (extracter1_fifo_stage0_reg$D_OUT[5] ?
					  4'd9 :
					  (extracter1_fifo_stage0_reg$D_OUT[4] ?
					     4'd10 :
					     (extracter1_fifo_stage0_reg$D_OUT[3] ?
						4'd11 :
						(extracter1_fifo_stage0_reg$D_OUT[2] ?
						   4'd12 :
						   (extracter1_fifo_stage0_reg$D_OUT[1] ?
						      4'd13 :
						      (extracter1_fifo_stage0_reg$D_OUT[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h5581 =
	     (extracter1_fifo_stage1_reg$D_OUT[3:0] == 4'd0) ?
	       extracter1_fifo_stage1_reg$D_OUT[3:0] != 4'd0 &
	       extracter1_fifo_stage1_reg$D_OUT[4] :
	       extracter1_fifo_stage1_regD_OUT_BITS_16_TO_4__q4[x__h5649] ;
  assign x__h5649 = extracter1_fifo_stage1_reg$D_OUT[3:0] - 4'd1 ;
  assign x__h6811 =
	     INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[14] ?
	       4'd0 :
	       (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[13] ?
		  4'd1 :
		  (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[12] ?
		     4'd2 :
		     (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[11] ?
			4'd3 :
			(INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[10] ?
			   4'd4 :
			   (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[9] ?
			      4'd5 :
			      (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[8] ?
				 4'd6 :
				 (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[7] ?
				    4'd7 :
				    (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[6] ?
				       4'd8 :
				       (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[5] ?
					  4'd9 :
					  (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[4] ?
					     4'd10 :
					     (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[3] ?
						4'd11 :
						(INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[2] ?
						   4'd12 :
						   (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[1] ?
						      4'd13 :
						      (INV_extracter2_fifo_stage0_regD_OUT_BITS_14_TO_0__q2[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h8943 = { 1'd0, x__h8950 } ;
  assign x__h8950 =
	     extracter2_fifo_stage0_reg$D_OUT[14] ?
	       4'd0 :
	       (extracter2_fifo_stage0_reg$D_OUT[13] ?
		  4'd1 :
		  (extracter2_fifo_stage0_reg$D_OUT[12] ?
		     4'd2 :
		     (extracter2_fifo_stage0_reg$D_OUT[11] ?
			4'd3 :
			(extracter2_fifo_stage0_reg$D_OUT[10] ?
			   4'd4 :
			   (extracter2_fifo_stage0_reg$D_OUT[9] ?
			      4'd5 :
			      (extracter2_fifo_stage0_reg$D_OUT[8] ?
				 4'd6 :
				 (extracter2_fifo_stage0_reg$D_OUT[7] ?
				    4'd7 :
				    (extracter2_fifo_stage0_reg$D_OUT[6] ?
				       4'd8 :
				       (extracter2_fifo_stage0_reg$D_OUT[5] ?
					  4'd9 :
					  (extracter2_fifo_stage0_reg$D_OUT[4] ?
					     4'd10 :
					     (extracter2_fifo_stage0_reg$D_OUT[3] ?
						4'd11 :
						(extracter2_fifo_stage0_reg$D_OUT[2] ?
						   4'd12 :
						   (extracter2_fifo_stage0_reg$D_OUT[1] ?
						      4'd13 :
						      (extracter2_fifo_stage0_reg$D_OUT[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign y__h12796 = 6'd1 - frac_shift__h12560 ;
  assign y__h16513 = frac_shift__h12567 - 6'd1 ;
  assign y__h20197 = frac_shift__h12572 - 6'd1 ;
  assign y__h26748 = ~normalizer_fifo_stage0_reg$D_OUT[1] ;
  assign y__h26752 =
	     { 20'd0,
	       (normalizer_fifo_stage0_reg$D_OUT[17:6] &
		~(12'hFFE << i1__h26758)) >>
	       0 } ==
	     32'd0 ;
  assign y__h27060 = { 14'd0, _theResult____h26827 } ;
  assign y__h27062 =
	     { 3'd0, normalizer_fifo_stage1_reg$D_OUT[22:11] } >>
	     _12_MINUS_normalizer_fifo_stage1_reg_first__04__ETC___d810 ;
  always@(extracter1_fifo_stage1_reg$D_OUT)
  begin
    case (extracter1_fifo_stage1_reg$D_OUT[3:0])
      4'd2: x__h5685 = 12'd11;
      4'd3: x__h5685 = 12'd10;
      4'd4: x__h5685 = 12'd9;
      4'd5: x__h5685 = 12'd8;
      4'd6: x__h5685 = 12'd7;
      4'd7: x__h5685 = 12'd6;
      4'd8: x__h5685 = 12'd5;
      4'd9: x__h5685 = 12'd4;
      4'd10: x__h5685 = 12'd3;
      4'd11: x__h5685 = 12'd2;
      4'd12: x__h5685 = 12'd1;
      4'd13: x__h5685 = 12'd0;
      default: x__h5685 =
		   (extracter1_fifo_stage1_reg$D_OUT[3:0] <= 4'd1) ?
		     12'd12 :
		     12'd0;
    endcase
  end
  always@(extracter2_fifo_stage1_reg$D_OUT)
  begin
    case (extracter2_fifo_stage1_reg$D_OUT[3:0])
      4'd2: x__h11327 = 12'd11;
      4'd3: x__h11327 = 12'd10;
      4'd4: x__h11327 = 12'd9;
      4'd5: x__h11327 = 12'd8;
      4'd6: x__h11327 = 12'd7;
      4'd7: x__h11327 = 12'd6;
      4'd8: x__h11327 = 12'd5;
      4'd9: x__h11327 = 12'd4;
      4'd10: x__h11327 = 12'd3;
      4'd11: x__h11327 = 12'd2;
      4'd12: x__h11327 = 12'd1;
      4'd13: x__h11327 = 12'd0;
      default: x__h11327 =
		   (extracter2_fifo_stage1_reg$D_OUT[3:0] <= 4'd1) ?
		     12'd12 :
		     12'd0;
    endcase
  end
  always@(normalizer_fifo_stage2_reg$D_OUT)
  begin
    case (normalizer_fifo_stage2_reg$D_OUT[17:16])
      2'd0:
	  output_regf_out_posit__h28258 =
	      { normalizer_fifo_stage2_reg$D_OUT[18],
		normalizer_fifo_stage2_reg$D_OUT[18] ?
		  15'd0 - normalizer_fifo_stage2_reg$D_OUT[14:0] :
		  normalizer_fifo_stage2_reg$D_OUT[14:0] };
      2'd1: output_regf_out_posit__h28258 = 16'd32768;
      default: output_regf_out_posit__h28258 = 16'd0;
    endcase
  end
  always@(adder1_fifo_stage0_reg$D_OUT or
	  adder1_fifo_stage0_reg_first__68_BITS_62_TO_57_ETC___d475 or
	  f2__h12308 or c__h12343)
  begin
    case (adder1_fifo_stage0_reg$D_OUT[1:0])
      2'b01: x__h12417 = f2__h12308;
      2'b10: x__h12417 = 25'd0;
      default: x__h12417 =
		   adder1_fifo_stage0_reg_first__68_BITS_62_TO_57_ETC___d475 ?
		     f2__h12308 :
		     c__h12343;
    endcase
  end
endmodule  // mkPNE_test

