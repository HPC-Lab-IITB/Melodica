One-time setup for configuring the environment:

1. Melodica is generic in terms of size of posits so one has to run 
./Gen_Posit_Numeric_Types --posit-width 8 --exp-width 1 --float-width 32
which is available in ./src_bsv/lib/
This will make generate the types package Posit_Numeric_Types.bsv (in this
example for a 8,1 posit and floating point value 32). This package contains type definitions for the
various Posit sub-fields based on Posit parameter

2. Melodica Uses SoftPosit to compare and check the answers
The Softposit library used is : https://gitlab.com/cerlane/SoftPosit.git
One has to build the library, please refer the site for the same.

3.The Testbench compares the result with SoftPosit via BDPI functionanlity 
of BSV so one has to correctly change the BDPI function depending on the
requirement- the BDPI functions mapped to functions are 
in ./src_c/softposit_wrappers.c 
Example : if one has to check Adder 16 bits input
import "BDPI" positAdd16  = function Bit#(PositWidth) checkoperation (Bit#(PositWidth) in1, Bit#(PositWidth) in2)	;
if one has to check Adder 8 bits input
import "BDPI" positAdd8  = function Bit#(PositWidth) checkoperation (Bit#(PositWidth) in1, Bit#(PositWidth) in2)	;

4. To check and compare FDP, Posit To Quire and Quire to Posit instructions with SoftPosits, the Testbench has 
BDPI fucntions that has the sizes manually added due to the size issue that 
occurs when communicating with ./src_c/softposit_wrappers.c.  

5. In the makefile if the RANDOM flag is set - that makes the input random
using LFSR RANDOM_PRINT flag - that makes the input random using LFSR and also
print the intermediate values got during simulation

6. Looking at ./src_bsv/PositCore.bsv gives the user an idea of how Melodica can be used. The flag BASIC_OPS is to enable the basic operation pipelines (ADD, SUB, MUL, DIV). If not set only fused and conversions are enabled.


Building Instructions:
	
	For Adder
	Takes 2 Posits as input and gives Posit as output
	To compile Adder
		command : make compile_adder
	To link Adder files and also with softposit
		command : make link_adder link_adder_d
	To compile and link Adder
		command : make adder
	To simulate Adder
		command : make simulate_adder
	(the files build are in builds/Adder)
	(the output file is out_adder which is in builds/Adder/output directory )
	(the verilog code generated is in VerilogCode/Adder directory)
	

	For Multiplier 
	Takes 2 Posits as input and gives Posit as output
	To compile Multiplier
		command : make compile_multiplier
	To link Multiplier files and also with softposit
		command : make link_multiplier link_multiplier_d
	To compile and link Multiplier
		command : make multiplier
	To simulate Multiplier
		command : make simulate_multiplier
	(the files build are in builds/Multiplier)
	(the output file is out_multiplier which is in builds/Multiplier/output directory )
	(the verilog code generated is in VerilogCode/Multiplier directory)

	For Divider 
	Takes 2 Posits as input and gives Posit as output
	To compile Divider
		command : make compile_divider
	To link Divider files and also with softposit
		command : make link_divider link_divider_d
	To compile and link Divider
		command : make divider
	To simulate Divider
		command : make simulate_divider
	(the files build are in builds/Divider)
	(the output file is out_divider which is in builds/Divider/output directory )
	(the verilog code generated is in VerilogCode/Divider directory)


	For Multiply-and-accumulate
	Takes 3 Posits as input and gives Posit as output 
	Output posit is computed by multiplying the first two posits and adding it to the third posit
	To compile Mac
		command : make compile_mac
	To link Mac files and also with softposit
		command : make link_mac link_mac_d
	To compile and link Mac
		command : make mac
	To simulate Mac
		command : make simulate_mac
	(the files build are in builds/Mac)
	(the output file is out_mac which is in builds/Mac/output directory )
	(the verilog code generated is in VerilogCode/Mac directory)

	For Fused-Multiply-Add 
	Takes 2 Posits and Quire as input and gives Quire as output
	Qutput Quire is computed by multiplying the two posits and accumulating it into the quire 
	To compile Fma
		command : make compile_fma
	To link Fma files and also with softposit
		command : make link_fma link_fma_d
	To compile and link Fma
		command : make fma
	To simulate Fma
		command : make simulate_fma
	(the files build are in builds/Fused_Op/fma)
	(the output file is out_fma which is in builds/Fused_Op/fma/output directory )
	(the verilog code generated is in VerilogCode/Fused_Op/fma directory)

	For Fused-Divide-Add 
	Takes 2 Posits and Quire as input and gives Quire as output
	Qutput Quire is computed by dividing the two posits and accumulating it into the quire 
	To compile Fda
		command : make compile_fda
	To link Fma files and also with softposit
		command : make link_fda link_fda_d
	To compile and link Fda
		command : make fda
	To simulate Fda
		command : make simulate_fda
	(the files build are in builds/Fused_Op/fda)
	(the output file is out_fda which is in builds/Fused_Op/fda/output directory )
	(the verilog code generated is in VerilogCode/Fused_Op/fda directory)

	For Quire-To-Posit 
	Takes Quire as input and gives Posit as output
	To compile QtoP
		command : make compile_qtop
	To link QtoP files and also with softposit
		command : make link_qtop link_qtop_d
	To compile and link QtoP
		command : make qtop
	To simulate QtoP
		command : make simulate_qtop
	(the files build are in builds/QtoP)
	(the output file is out_qtop which is in builds/QtoP/output directory )
	(the verilog code generated is in VerilogCode/QtoP directory)


	For Posit-To-Quire
	Takes Posit as input and gives Quire as output 
	To compile PtoQ
		command : make compile_ptoq
	To link PtoQ files and also with softposit
		command : make link_ptoq link_ptoq_d
	To compile and link PtoQ
		command : make ptoq
	To simulate PtoQ
		command : make simulate_ptoq
	(the files build are in builds/PtoQ)
	(the output file is out_ptoq which is in builds/PtoQ/output directory )
	(the verilog code generated is in VerilogCode/PtoQ directory)

	For Float-To-Posit 
	Takes Float as input and gives Posit as output
	To compile FtoP
		command : make compile_ftop
	To link FtoP files and also with softposit
		command : make link_ftop link_ftop_d
	To compile and link FtoP
		command : make ftop
	To simulate FtoP
		command : make simulate_ftop
	(the files build are in builds/FtoP)
	(the output file is out_ftop which is in builds/FtoP/output directory )
	(the verilog code generated is in VerilogCode/FtoP directory)


	For Posit-To-Float
	Takes Posit as input and gives Float as output 
	To compile PtoF
		command : make compile_ptof
	To link PtoF files and also with softposit
		command : make link_ptof link_ptof_d
	To compile and link PtoF
		command : make ptof
	To simulate PtoF
		command : make simulate_ptof
	(the files build are in builds/PtoF)
	(the output file is out_ptof which is in builds/PtoF/output directory )
	(the verilog code generated is in VerilogCode/PtoF directory)


