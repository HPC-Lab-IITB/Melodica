
One-time setup for configuring the environment:
1. change testbench code : correctly change the BDPI function depending on the
requirement- the BDPI functions are in Test_c.c from the softposit folder
[NS] What is the requirement? Can you give an example?

2. ./Gen_Posit_Numeric_Types --posit-width 8 --exp-width 5
This will make generate the types package Posit_Numeric_Types.bsv (in this
example for a 8,5 posit). This package contains type definitions for the
various Posit sub-fields based on Posit parameter

3. may have to make change the bit sizes in the testbench if hard coded- only
in a few cases but check
[NS] This is vague. Either you have to, or you don't :) How is a user supposed
to guess? Give the recipe where a user has to make the edits. 

4. in the makefile if the RANDOM flag is set - that makes the input random
using LFSR RANDOM_PRINT flag - that makes the input random using LFSR and also
print the intermediate values got during simulation


Building Instructions:
	
	For ADDER
	Takes 2 Posits as input and gives Posit as output
	To compile Adder
		command : make compile_adder
	To link Adder files and also with softposit
		command : make link_adder link_adder_d
	To compile and link Adder
		command : make adder
	To simulate Adder
		command : make simulate_adder
	(the files build are in builds/Adder)
	(the output file is out_adder which is in builds/Adder/output directory )
	(the verilog code generated is in VerilogCode/Adder directory)

	For MULTIPLIER 
	Takes 2 Posits as input and gives Posit as output
	To compile Multiplier
		command : make compile_multiplier
	To link Multiplier files and also with softposit
		command : make link_multiplier link_multiplier_d
	To compile and link Multiplier
		command : make multiplier
	To simulate Multiplier
		command : make simulate_multiplier
	(the files build are in builds/Multiplier)
	(the output file is out_multiplier which is in builds/Multiplier/output directory )
	(the verilog code generated is in VerilogCode/Multiplier directory)

	For Multiply-and-accumulate
	Takes 3 Posits as input and gives Posit as output 
	Output posit is computed by multiplying the first two posits and adding it to the third posit
	To compile Mac
		command : make compile_mac
	To link Mac files and also with softposit
		command : make link_mac link_mac_d
	To compile and link Mac
		command : make mac
	To simulate Mac
		command : make simulate_mac
	(the files build are in builds/Mac)
	(the output file is out_mac which is in builds/Mac/output directory )
	(the verilog code generated is in VerilogCode/Mac directory)

	For Fused-dot-product 
	Takes 2 Posits and Quire as input and gives Quire as output
	Qutput Quire is computed by multiplying the two posits abd accumulating it into the quire 
	To compile Fdp
		command : make compile_fdp
	To link Fdp files and also with softposit
		command : make link_fdp link_fdp_d
	To compile and link Fdp
		command : make fdp
	To simulate Fdp
		command : make simulate_fdp
	(the files build are in builds/Fdp)
	(the output file is out_fdp which is in builds/Fdp/output directory )
	(the verilog code generated is in VerilogCode/Fdp directory)

	For Quire-To-Posit 
	Takes Quire as input and gives Posit as output
	To compile QtoP
		command : make compile_qtop
	To link QtoP files and also with softposit
		command : make link_qtop link_qtop_d
	To compile and link QtoP
		command : make qtop
	To simulate QtoP
		command : make simulate_qtop
	(the files build are in builds/QtoP)
	(the output file is out_qtop which is in builds/QtoP/output directory )
	(the verilog code generated is in VerilogCode/QtoP directory)


	For Posit-To-Quire
	Takes Posit as input and gives Quire as output 
	To compile PtoQ
		command : make compile_ptoq
	To link PtoQ files and also with softposit
		command : make link_ptoq link_ptoq_d
	To compile and link PtoQ
		command : make ptoq
	To simulate PtoQ
		command : make simulate_ptoq
	(the files build are in builds/PtoQ)
	(the output file is out_ptoq which is in builds/PtoQ/output directory )
	(the verilog code generated is in VerilogCode/PtoQ directory)



